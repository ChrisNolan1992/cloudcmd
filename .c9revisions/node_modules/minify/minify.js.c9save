{"ts":1342200026439,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* Модуль сжатия js-скриптов, css-стилей, html-файлов и\r\n * конвертации картинок в css-стилях \r\n * в base64 и помещения их в файл стилей\r\n */\r\n\r\nconsole.log('minify.js loaded...');\r\n\r\n/* функция сжимает js-скрипты \r\n * и сохраняет их с именем .min.js\r\n */\r\n \r\nvar fs = require('fs');\r\nvar path=require('path');\r\nvar crypto = require('crypto');\r\n\r\nvar Hashes;\r\n\r\nvar MinFolder='min/';\r\n/* function clear MinFolder\r\n * if we could not create\r\n * directory and it is\r\n * not exist\r\n */\r\nvar folderExist = function(pError, pStat){\r\n    \"use strict\";\r\n    /*file found and it's directory */\r\n    if(!pError && pStat.isDirectory())\r\n        console.log('folder exist: ' + MinFolder);\r\n    else MinFolder='/';\r\n};\r\n\r\n/*\r\n * function says thet folder created\r\n * if everything is OK, or\r\n * moves to folderExist function\r\n */\r\nvar makeFolder = function(pError){\r\n    \"use strict\";\r\n    /*folder created successfully*/\r\n    if(!pError)\r\n        console.log('folder created: min');\r\n    else fs.stat(MinFolder,folderExist);    \r\n};\r\n\r\n/* Trying to create folder min\r\n * where woud be minifyed versions\r\n * of files 511(10)=777(8)\r\n * rwxrwxrwx\r\n */\r\nfs.mkdir(MinFolder,511,makeFolder);\r\n\r\nexports.MinFolder = MinFolder;\r\nexports.Cache    = {};\r\n\r\n/* function which minificate js-files\r\n * @pJSFiles_a              - varible, wich contain array\r\n *                            of js file names or string, if name\r\n *                            single, or object if postProcessing neaded\r\n *                              { Name:'1.js', Func: function(pFinalCode){} }\r\n * @pCache_b                - if true files do not writes on disk, just saves\r\n *                              in Minify Cache\r\n */\r\nexports.jsScripts=function jsScripts(pJSFiles_a, pCache_b){\r\n    'use strict';\r\n    /* подключаем модуль uglify-js\r\n     * если его нет - дальнейшая \r\n     * работа функции не имеет смысла\r\n     */\r\n    try{\r\n        var jsp = require(\"uglify-js\").parser;\r\n        var pro = require(\"uglify-js\").uglify;\r\n    }catch(error){\r\n        console.log('can\\'n load uglify-js\\n'                  +\r\n            'to use js-minification you need to install uglify-js\\n'    +\r\n                'npm install uglify-js\\n'                               +\r\n                'https://github.com/mishoo/UglifyJS');\r\n        return false;\r\n    }\r\n    var lLastFileName;\r\n    \r\n    /* if passed string, or object \r\n     * putting it to array\r\n     */\r\n    if (typeof pJSFiles_a === 'string' ||\r\n        !pJSFiles_a[0])\r\n            pJSFiles_a=[pJSFiles_a];                \r\n    \r\n    var dataReaded_f=function(pFileName, pData){        \r\n        /*\r\n         * if postProcessing function exist\r\n         * getting it from pFileName object\r\n         */\r\n        var lMoreProcessing_f;\r\n        if(typeof pFileName === 'object'){\r\n            var lName;\r\n            for(lName in pFileName){\r\n                break;\r\n            }\r\n            lMoreProcessing_f = pFileName[lName];            \r\n            pFileName = lName;\r\n        }\r\n        console.log('file ' + pFileName + ' readed');\r\n        \r\n        if (!isFileChanged(pFileName, pData)) {\r\n            console.log('file: ' + pFileName + ' do not changed...');\r\n            return;\r\n        }\r\n        \r\n        /*********************************/\r\n        /* сжимаем код через uglify-js */\r\n        var uglify_js=function(pDdata){\r\n            var orig_code = pDdata.toString();\r\n            var ast = jsp.parse(orig_code); // parse code and get the initial AST\r\n            ast = pro.ast_mangle(ast); // get a new AST with mangled names\r\n            ast = pro.ast_squeeze(ast); // get an AST with compression optimizations\r\n            var result_code = pro.gen_code(ast); // compressed code here\r\n            return result_code;\r\n        };\r\n        /*********************************/\r\n        var final_code=uglify_js(pData);\r\n        \r\n        var minFileName=pFileName.replace('.js','.min.js');\r\n        \r\n        /* если мы сжимаем client.js -\r\n         * меняем строку cloudfunc.js на\r\n         * cloudfunc.min.js и выводим сообщение\r\n         *\r\n         * меняем строку keyBinding.js на\r\n         * keyBinding.min.js\r\n         * если другой файл - ничего не деалем\r\n         */             \r\n        \r\n        /* if lMoreProcessing_f seeted up \r\n         * and function associated with\r\n         * current file name exists -\r\n         * run it\r\n         */\r\n        if(lMoreProcessing_f                    &&    \r\n            typeof lMoreProcessing_f === \"function\"){\r\n                final_code = lMoreProcessing_f(final_code);\r\n        }                   \r\n        \r\n        minFileName = path.basename(minFileName);\r\n                \r\n        /* записываем сжатый js-скрипт\r\n         * в кэш если установлен pCache_b\r\n         * или на диск, если не установлен\r\n         */\r\n        if(pCache_b){\r\n            exports.Cache[minFileName] = final_code;\r\n            console.log('file ' + minFileName + ' saved to cache...');\r\n        }\r\n        else{\r\n            /* minimized file will be in min file\r\n             * if it's possible if not -\r\n             * in root\r\n             */\r\n            minFileName = MinFolder + minFileName;\r\n            \r\n            fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n        }\r\n    };\r\n    \r\n    var lName;\r\n    /* moving thru all elements of js files array */\r\n    for(var i=0; pJSFiles_a[i]; i++){\r\n        /* if postProcessing function exist\r\n         * getting file name and passet next\r\n         */\r\n        var lMoreProcessing_o = pJSFiles_a[i];        \r\n        if(typeof lMoreProcessing_o === 'object'){\r\n            for(lName in lMoreProcessing_o){\r\n            }\r\n        }else lName = pJSFiles_a[i];\r\n        console.log('reading file ' + lName + '...');        \r\n        \r\n        fs.readFile(lName, fileReaded(pJSFiles_a[i], dataReaded_f));\r\n    }\r\n    /* saving the name of last readed file for hash saving function */\r\n    lLastFileName = lName;\r\n    \r\n    return true;\r\n};\r\n\r\n/* функция сжимает css-стили \r\n * и сохраняет их с именем .min.css\r\n * @pCSSFiles_a           - масив имен css файлов или строка,\r\n *                          если имя одно\r\n * @pImgConvertToBase64_b - булевый признак,\r\n *                          который отвечает за то, что быконвертировать\r\n *                          картинки в base64 и поместить в выходной css файл\r\n */\r\nexports.cssStyles=function cssStyles(pCSSFiles_a, pImgConvertToBase64_b){\r\n    'use strict';\r\n    \r\n     /* connecting cleanCSS,\r\n      * if we can't find it -\r\n      * return false\r\n      */\r\n     var cleanCSS;\r\n     try{\r\n        cleanCSS = require('clean-css');\r\n    }catch(error){\r\n        console.log('can\\'n load clean-css \\n'                          +\r\n            'to use css-minification you need to install clean-css \\n'  +\r\n                'npm install clean-css\\n'                               +\r\n                'https://github.com/GoalSmashers/clean-css');\r\n        return false;\r\n    }\r\n            \r\n    if(typeof pCSSFiles_a === \"string\")\r\n        pCSSFiles_a=[pCSSFiles_a];\r\n    /* Varible contains information\r\n     * about readed css file\r\n     */\r\n    var lCSSFiles_doneCount=0;\r\n    \r\n    var lAllStyle='';\r\n    \r\n    var dataReaded_f=function(pFileName, pData){\r\n        console.log('file ' + pFileName + ' readed');                \r\n        /*********************************/\r\n        /* сжимаем код через clean-css */\r\n        var clean_css=function(pData){\r\n            /* Сохраняем весь стиль в одну переменную*/            \r\n            return cleanCSS.process(pData);\r\n        };\r\n        /*********************************/\r\n        var final_code=clean_css(pData);\r\n        \r\n        lAllStyle+=final_code;\r\n        \r\n        var minFileName=pFileName.replace('.css','.min.css');           \r\n           \r\n        ++lCSSFiles_doneCount;\r\n        \r\n        /* if all files writed we\r\n         * save all minimized css \r\n         * to one file all.min.css\r\n         */                \r\n        if(pCSSFiles_a.length === lCSSFiles_doneCount){\r\n            /* если включена конвертация картинок в base64\r\n             * вызываем её\r\n             */\r\n            if(pImgConvertToBase64_b)\r\n                base64_images(lAllStyle);\r\n            else\r\n                fs.writeFile(MinFolder + 'all.min.css', lAllStyle, fileWrited(MinFolder + 'all.min.css'));\r\n        }\r\n         /* в другом случае - записываем сжатый css файл*/\r\n        else{\r\n            minFileName = MinFolder + path.basename(minFileName); \r\n            fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n        }\r\n    };\r\n    \r\n   /* moving thru all elements of css files array */\r\n    for(var i=0;pCSSFiles_a[i];i++){\r\n        console.log('reading file ' + pCSSFiles_a[i]+'...');\r\n        fs.readFile(pCSSFiles_a[i],fileReaded(pCSSFiles_a[i],dataReaded_f));\r\n    }\r\n        \r\n    return true;\r\n};\r\n\r\n/* функция сжимает html файлы\r\n * и сохраняет их с именем .min.html\r\n * @pHTMLFiles_a - массим имен html\r\n * файлов, или строка если имя одно\r\n */\r\nexports.html=function(pHTMLFiles_a){\r\n    'use strict';\r\n    \r\n     /* connecting cleanCSS,\r\n      * if we can't find it -\r\n      * return false\r\n      */\r\n     var htmlMinifier;\r\n     try{\r\n        htmlMinifier = require('html-minifier');\r\n    }catch(error){\r\n        console.log('can\\'n load html-minifier \\n'                 +\r\n            'to use html-minification you need to install html-minifier\\n'  +\r\n                'npm install html-minifier\\n'                               +\r\n                'https://github.com/kangax/html-minifier');\r\n        return false;\r\n    }\r\n        \r\n    /* if html file names is not array\r\n     * making it array\r\n     */\r\n    if (typeof pHTMLFiles_a === 'string' || \r\n        !pHTMLFiles_a[0])\r\n            pHTMLFiles_a=[pHTMLFiles_a];\r\n    var dataReaded_f=function(pFileName, pData){\r\n        console.log('file ' + pFileName + ' readed');                \r\n        /*********************************/\r\n        /* сжимаем код через clean-css */\r\n        var html_minify=function(pData){\r\n            /* Сохраняем весь стиль в одну переменную*/            \r\n            \r\n            var lOptions={\r\n                removeComments:                 true,\r\n                removeCommentsFromCDATA:        true,\r\n                removeCDATASectionsFromCDATA:   true,\r\n                collapseWhitespace:             true,\r\n                collapseBooleanAttributes:      true,\r\n                removeAttributeQuotes:          true,\r\n                removeRedundantAttributes:      true,\r\n                useShortDoctype:                true,\r\n                removeEmptyAttributes:          true,\r\n                /* оставляем, поскольку у нас\r\n                 * в элемент fm генерируеться\r\n                 * таблица файлов\r\n                 */\r\n                removeEmptyElements:            false,\r\n                removeOptionalTags:             true,\r\n                removeScriptTypeAttributes:     true,\r\n                removeStyleLinkTypeAttributes:  true\r\n            };\r\n            \r\n            \r\n            return htmlMinifier.minify(pData,lOptions);\r\n        };\r\n        /*********************************/\r\n        var final_code=html_minify(pData);\r\n                \r\n        var minFileName=pFileName.replace('.html','.min.html');\r\n                    \r\n         /* adding Min folder to file path */\r\n         minFileName = MinFolder + minFileName;\r\n         /* записываем сжатый html файл*/\r\n        fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n    };\r\n        \r\n     /* moving thru all elements of html files array */\r\n    for(var i=0;pHTMLFiles_a[i];i++){\r\n        console.log('reading file ' + pHTMLFiles_a[i]+'...');\r\n        fs.readFile(pHTMLFiles_a[i],fileReaded(pHTMLFiles_a[i],dataReaded_f));\r\n    }\r\n    \r\n    return true;\r\n};\r\n\r\n/* функция переводит картинки в base64 и записывает в css-файл*/\r\nfunction base64_images(pFileContent_s){\r\n    'use strict';    \r\n     var b64img;\r\n     try{\r\n        b64img = require('css-b64-images');\r\n    }catch(error){\r\n        console.log('can\\'n load clean-css \\n'                 +\r\n            'to use images to base64 convertation you need to install css-base64-images \\n'  +\r\n                'npm install -g css-b64-images\\n'                               +\r\n                'https://github.com/Filirom1/css-base64-images');\r\n        return false;\r\n    }\r\n    b64img.fromString(pFileContent_s, '.','', function(err, css){\r\n        console.log('images converted to base64 and saved in css file');\r\n        fs.writeFile(MinFolder + 'all.min.css', css, fileWrited(MinFolder + 'all.min.css'));\r\n    });\r\n}\r\n\r\n/* Функция создаёт асинхроную версию \r\n * для чтения файла\r\n * @pFileName - имя считываемого файла\r\n */\r\nfunction fileReaded(pFileName,pCompressFunc){\r\n    \"use strict\";\r\n    return function(pError,pData){\r\n        /* функция в которую мы попадаем,\r\n         * если данные считались\r\n         *\r\n         * если ошибка - показываем её\r\n         * иначе если переданная функция -\r\n         * функция запускаем её\r\n         */        \r\n        if(!pError)\r\n            if (pCompressFunc && typeof pCompressFunc===\"function\")\r\n                    pCompressFunc(pFileName,pData.toString());\r\n        else console.log(pError);\r\n    };\r\n}\r\n\r\n/*\r\n * Функция вызываеться после записи файла\r\n * и выводит ошибку или сообщает,\r\n * что файл успешно записан\r\n */\r\nfunction fileWrited(pFileName){\r\n    \"use strict\";\r\n    return function(error){\r\n        console.log(error?error:('file '+pFileName+' writed...'));\r\n    };\r\n}\r\n\r\n/*\r\n * Function reads hash table of files\r\n * checks is file changed or not\r\n * and return result.\r\n * @pFileName - name of file\r\n * @pFileData - data of file\r\n * result: boolean\r\n */\r\nfunction isFileChanged(pFileName, pFileData){\r\n        var lReadedHash;\r\n        \r\n        if(!Hashes)\r\n            try {\r\n                /* try to read file with hashes */\r\n                Hashes = require('hashes.json');            \r\n                for(var lFileName in Hashes)\r\n                    /* if founded row with file name\r\n                     * saving hash\r\n                     */\r\n                    if (lFileName === pFileName) {\r\n                        lReadedHash = Hashes[pFileName];\r\n                        break;\r\n                    }\r\n            }catch(pError) {\r\n                Hashes={};\r\n            }\r\n        /* create md5 hash of file data */ \r\n        var lFileHash = crypto.createHash('sha1');\r\n        lFileHash.update(pFileData);\r\n        lFileHash = lFileHash.digest('hex');\r\n        \r\n        console.log(pFileName + ': ' + lFileHash);\r\n        \r\n        if(lReadedHash && \r\n            lReadedHash === lFileHash){\r\n                /* file did not change */\r\n                return false;\r\n        }else{\r\n            Hashes[pFileName] = lFileHash;\r\n            console.log(Hashes);\r\n            \r\n            return true;\r\n        }        \r\n}"]],"start1":0,"start2":0,"length1":0,"length2":14953}]],"length":14953}
{"contributors":[],"silentsave":false,"ts":1342251649823,"patch":[[{"diffs":[[0," {};\r\n\r\n"],[1,"\r\n/* function minificate js,css and html files\r\n * @pFiles_a                - array of js, css and html file names or string, if name\r\n *                            single, or object if postProcessing neaded\r\n *                              {'client.js': function(pFinalCode){} }\r\n *                            or convertion images to base64 neaded\r\n *                              {'style.css': true}\r\n *                            or {'style.css':{minimize: true, func: function(){}}\r\n * @pCache_b                - if true files do not writes on disk, just saves\r\n *                              in Minify Cache\r\n */\r\nexports.optimize = function(pFiles_a, pCache_b){\r\n    'use strict';\r\n    \r\n     /* if passed string, or object \r\n     * putting it to array\r\n     */\r\n    if (typeof pFiles_a === 'string' ||\r\n        !pFiles_a[0])\r\n            pFiles_a=[pFiles_a];      \r\n            \r\n            \r\n    var lName;\r\n        \r\n    var dataReaded_f=function(pFileName, pData){\r\n     \r\n    }\r\n    /* moving thru all elements of js files array */\r\n    for(var i=0; pFiles_a[i]; i++){\r\n        /* if postProcessing function exist\r\n         * getting file name and passet next\r\n         */\r\n        var lPostProcessing_o = pJSFiles_a[i];        \r\n        if(typeof lPostProcessing_o === 'object'){\r\n            for(lName in lPostProcessing_o){\r\n            }\r\n        }else lName = pFiles_a[i];\r\n        console.log('reading file ' + lName + '...');        \r\n        \r\n        fs.readFile(lName, fileReaded(pFiles_a[i], dataReaded_f));\r\n    }\r\n    /* saving the name of last readed file for hash saving function */\r\n    lLastFileName = lName;\r\n    \r\n    return true;\r\n}\r\n\r\n\r\n"],[0,"/* funct"]],"start1":1229,"start2":1229,"length1":16,"length2":1687}]],"length":16624,"saved":false}
{"ts":1342251816134,"patch":[[{"diffs":[[0,"Processing_o = p"],[-1,"JS"],[0,""],[1,""],[0,"Files_a[i];     "]],"start1":2441,"start2":2441,"length1":34,"length2":32},{"diffs":[[0,"      \r\n        "],[1,"        \r\n        /* if it's last file send true */"],[0,"\r\n        fs.rea"]],"start1":2682,"start2":2682,"length1":32,"length2":83},{"diffs":[[0,".readFile(lName,"],[1,"\r\n           "],[0," fileReaded(pFil"]],"start1":2761,"start2":2761,"length1":32,"length2":45},{"diffs":[[0,"pFiles_a[i],"],[-1," dataReaded_f"],[1,"\r\n                dataReaded_f,\r\n                (i===pFiles_a.length)?true:false"],[0,"));\r\n    }\r\n"]],"start1":2802,"start2":2802,"length1":37,"length2":105},{"diffs":[[0,"*/\r\n"],[-1,"    lLastFileName = lName;\r\n"],[0,"    "]],"start1":2975,"start2":2975,"length1":36,"length2":8}]],"length":16726,"saved":false}
{"ts":1342251974471,"patch":[[{"diffs":[[0," \r\n "],[-1,"   var dataReaded_f=function(pFileName, pData){\r\n     "],[1,"var dataReaded_f=function(pFileName, pData){        \r\n        /*\r\n         * if postProcessing function exist\r\n         * getting it from pFileName object\r\n         */\r\n        var lMoreProcessing_f;\r\n        if(typeof pFileName === 'object'){\r\n            var lName;\r\n            for(lName in pFileName){\r\n                break;\r\n            }\r\n            lMoreProcessing_f = pFileName[lName];            \r\n            pFileName = lName;\r\n        }\r\n        console.log('file ' + pFileName + ' readed');\r\n        \r\n        if (!isFileChanged(pFileName, pData)) {\r\n            console.log('file: ' + pFileName + ' do not changed...');\r\n            return;\r\n        }\r\n        \r\n        /*********************************/\r\n        /* сжимаем код через uglify-js */\r\n        var uglify_js=function(pDdata){\r\n            \r\n            /* подключаем модуль uglify-js\r\n             * если его нет - дальнейшая \r\n             * работа функции не имеет смысла\r\n             */\r\n            var jsp;\r\n            var pro;\r\n            try{\r\n                jsp = require(\"uglify-js\").parser;\r\n                pro = require(\"uglify-js\").uglify;\r\n            }catch(error){\r\n                console.log('can\\'n load uglify-js\\n'                  +\r\n                    'to use js-minification you need to install uglify-js\\n'    +\r\n                        'npm install uglify-js\\n'                               +\r\n                        'https://github.com/mishoo/UglifyJS');\r\n                return false;\r\n            }\r\n                        \r\n            var orig_code = pDdata.toString();\r\n            var ast = jsp.parse(orig_code); // parse code and get the initial AST\r\n            ast = pro.ast_mangle(ast); // get a new AST with mangled names\r\n            ast = pro.ast_squeeze(ast); // get an AST with compression optimizations\r\n            var result_code = pro.gen_code(ast); // compressed code here\r\n            return result_code;\r\n        };\r\n        /*********************************/\r\n        var final_code=uglify_js(pData);\r\n        \r\n        var minFileName=pFileName.replace('.js','.min.js');\r\n        \r\n        /* если мы сжимаем client.js -\r\n         * меняем строку cloudfunc.js на\r\n         * cloudfunc.min.js и выводим сообщение\r\n         *\r\n         * меняем строку keyBinding.js на\r\n         * keyBinding.min.js\r\n         * если другой файл - ничего не деалем\r\n         */             \r\n        \r\n        /* if lMoreProcessing_f seeted up \r\n         * and function associated with\r\n         * current file name exists -\r\n         * run it\r\n         */\r\n        if(lMoreProcessing_f                    &&    \r\n            typeof lMoreProcessing_f === \"function\"){\r\n                final_code = lMoreProcessing_f(final_code);"],[0,"\r\n    "],[1," "],[-1,"}"],[1,"   }                   \r\n        \r\n        minFileName = path.basename(minFileName);\r\n                \r\n        /* записываем сжатый js-скрипт\r\n         * в кэш если установлен pCache_b\r\n         * или на диск, если не установлен\r\n         */\r\n        if(pCache_b){\r\n            exports.Cache[minFileName] = final_code;\r\n            console.log('file ' + minFileName + ' saved to cache...');\r\n        }\r\n        else{\r\n            /* minimized file will be in min file\r\n             * if it's possible if not -\r\n             * in root\r\n             */\r\n            minFileName = MinFolder + minFileName;\r\n            \r\n            fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n        }\r\n    };"],[0,"\r\n  "]],"start1":2162,"start2":2162,"length1":69,"length2":3477}]],"length":20134,"saved":false}
{"ts":1342252025137,"patch":[[{"diffs":[[0,"      var uglify"],[-1,"_js"],[1,"JS"],[0,"=function(pDdata"]],"start1":2935,"start2":2935,"length1":35,"length2":34},{"diffs":[[0,"inal_code=uglify"],[-1,"_js"],[1,"JS"],[0,"(pData);\r\n      "]],"start1":4178,"start2":4178,"length1":35,"length2":34}]],"length":20132,"saved":false}
{"ts":1342252037794,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n"],[0,"        "],[-1,"/*********************************/\r\n        /* сжимаем код через uglify-js */\r\n        var uglifyJS=function(pDdata){\r\n            \r\n            /* подключаем модуль uglify-js\r\n             * если его нет - дальнейшая \r\n             * работа функции не имеет смысла\r\n             */\r\n            var jsp;\r\n            var pro;\r\n            try{\r\n                jsp = require(\"uglify-js\").parser;\r\n                pro = require(\"uglify-js\").uglify;\r\n            }catch(error){\r\n                console.log('can\\'n load uglify-js\\n'                  +\r\n                    'to use js-minification you need to install uglify-js\\n'    +\r\n                        'npm install uglify-js\\n'                               +\r\n                        'https://github.com/mishoo/UglifyJS');\r\n                return false;\r\n            }\r\n                        \r\n            var orig_code = pDdata.toString();\r\n            var ast = jsp.parse(orig_code); // parse code and get the initial AST\r\n            ast = pro.ast_mangle(ast); // get a new AST with mangled names\r\n            ast = pro.ast_squeeze(ast); // get an AST with compression optimizations\r\n            var result_code = pro.gen_code(ast); // compressed code here\r\n            return result_code;\r\n        };\r\n        /*********************************/"],[0,"\r\n  "]],"start1":2839,"start2":2839,"length1":1328,"length2":16}]],"length":18820,"saved":false}
{"ts":1342252062420,"patch":[[{"diffs":[[0,"   = {};\r\n\r\n"],[1,"/*********************************/\r\n/* сжимаем код через uglify-js */\r\nvar uglifyJS=function(pDdata){\r\n    \r\n    /* подключаем модуль uglify-js\r\n     * если его нет - дальнейшая \r\n     * работа функции не имеет смысла\r\n     */\r\n    var jsp;\r\n    var pro;\r\n    try{\r\n        jsp = require(\"uglify-js\").parser;\r\n        pro = require(\"uglify-js\").uglify;\r\n    }catch(error){\r\n        console.log('can\\'n load uglify-js\\n'                  +\r\n            'to use js-minification you need to install uglify-js\\n'    +\r\n                'npm install uglify-js\\n'                               +\r\n                'https://github.com/mishoo/UglifyJS');\r\n        return false;\r\n    }\r\n                \r\n    var orig_code = pDdata.toString();\r\n    var ast = jsp.parse(orig_code); // parse code and get the initial AST\r\n    ast = pro.ast_mangle(ast); // get a new AST with mangled names\r\n    ast = pro.ast_squeeze(ast); // get an AST with compression optimizations\r\n    var result_code = pro.gen_code(ast); // compressed code here\r\n    return result_code;\r\n};\r\n/*********************************/\r\n\r\n\r\n"],[0,"\r\n/* functio"]],"start1":1225,"start2":1225,"length1":24,"length2":1116}]],"length":19912,"saved":false}
{"ts":1342252069874,"patch":[[{"diffs":[[0,"-js */\r\n"],[-1,"var"],[1,"function"],[0," uglifyJ"]],"start1":1301,"start2":1301,"length1":19,"length2":24},{"diffs":[[0,"uglifyJS"],[-1,"=function"],[0,"(pDdata)"]],"start1":1318,"start2":1318,"length1":25,"length2":16}]],"length":19908,"saved":false}
{"ts":1342252074049,"patch":[[{"diffs":[[0,"code;\r\n}"],[-1,";"],[0,"\r\n/*****"]],"start1":2273,"start2":2273,"length1":17,"length2":16}]],"length":19907,"saved":false}
{"ts":1342252132448,"patch":[[{"diffs":[[0,"s');"],[-1,"\r\n        \r\n        /* если мы сжимаем client.js -\r\n         * меняем строку cloudfunc.js на\r\n         * cloudfunc.min.js и выводим сообщение\r\n         *\r\n         * меняем строку keyBinding.js на\r\n         * keyBinding.min.js\r\n         * если другой файл - ничего не деалем\r\n         */     "],[0,"    "]],"start1":4046,"start2":4046,"length1":300,"length2":8}]],"length":19615,"saved":false}
{"ts":1342252223261,"patch":[[{"diffs":[[0,"***/\r\n\r\n"],[1,"/*\r\n * Функция ищет в имени файла расширение\r\n * и если находит возвращает true\r\n * @pName - получает имя файла\r\n * @pExt - расширение\r\n */\r\nfunction checkExtension(pName,pExt)\r\n{\r\n    /* если длина имени больше\r\n     * длинны расширения - \r\n     * имеет смысл продолжать\r\n     */\r\n    if(pName.length>pExt.length){\r\n        var lLength=pName.length;           /* длина имени*/\r\n        var lExtNum=pName.lastIndexOf(pExt);/* последнее вхождение расширения*/\r\n        var lExtSub=lLength-lExtNum;        /* длина расширения*/\r\n        /* если pExt - расширение pName */\r\n        if(lExtSub===pExt.length)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n    else return false;\r\n}\r\n"],[0,"\r\n\r\n/* f"]],"start1":2314,"start2":2314,"length1":16,"length2":723}]],"length":20322,"saved":false}
{"ts":1342252291404,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"function uglifyJS"],[1,"Minify.uglifyJS= function"],[0,"(pDd"]],"start1":1305,"start2":1305,"length1":25,"length2":33},{"diffs":[[0,"е\r\n */\r\n"],[-1,"function "],[1,"Minify._"],[0,"checkExt"]],"start1":2463,"start2":2463,"length1":25,"length2":24},{"diffs":[[0,"xtension"],[1,"=function"],[0,"(pName,p"]],"start1":2485,"start2":2485,"length1":16,"length2":25}]],"length":20338,"saved":false}
{"ts":1342252296626,"patch":[[{"diffs":[[0,"\nMinify."],[1,"_"],[0,"uglifyJS"]],"start1":1308,"start2":1308,"length1":16,"length2":17}]],"length":20339,"saved":false}
{"ts":1342252305307,"patch":[[{"diffs":[[0,"й\r\n */\r\n"],[1,"var Minify = {};"],[0,"\r\nconsol"]],"start1":135,"start2":135,"length1":16,"length2":32}]],"length":20355,"saved":false}
{"ts":1342252329072,"patch":[[{"diffs":[[0," final_code="],[1,"Minify."],[0,"uglifyJS(pDa"]],"start1":4691,"start2":4691,"length1":24,"length2":31}]],"length":20362,"saved":false}
{"ts":1342252369290,"patch":[[{"diffs":[[0,"     }\r\n        "],[1,"\r\n        if(Minify._checkExtension()){\r\n        }\r\n"],[0,"        \r\n      "]],"start1":4654,"start2":4654,"length1":32,"length2":84}]],"length":20414,"saved":false}
{"ts":1342252384868,"patch":[[{"diffs":[[0,"tension("],[1,"pFileName,'js'"],[0,")){\r\n   "]],"start1":4698,"start2":4698,"length1":16,"length2":30}]],"length":20428,"saved":false}
{"ts":1342252444513,"patch":[[{"diffs":[[0,"   }\r\n        \r\n"],[1,"        var final_code;\r\n        var minFileName;\r\n"],[0,"        if(Minif"]],"start1":4656,"start2":4656,"length1":32,"length2":83},{"diffs":[[0,"    "],[-1,"}\r\n        \r\n        var"],[1,"   "],[0," fin"]],"start1":4780,"start2":4780,"length1":32,"length2":11},{"diffs":[[0,"uglifyJS(pData);"],[-1,"\r\n"],[0,"        \r\n      "]],"start1":4806,"start2":4806,"length1":34,"length2":32},{"diffs":[[0,"      \r\n        "],[1,"   "],[-1,"var"],[0," minFileName=pFi"]],"start1":4824,"start2":4824,"length1":35,"length2":35},{"diffs":[[0,"in.js');        "],[1,"   \r\n        }        "],[0,"\r\n        \r\n    "]],"start1":4883,"start2":4883,"length1":32,"length2":54}]],"length":20478,"saved":false}
{"ts":1342252486803,"patch":[[{"diffs":[[0,"       }"],[1,"else\r\n"],[0,"        "],[1,"    return;"],[0,"\r\n      "]],"start1":4905,"start2":4905,"length1":24,"length2":41}]],"length":20495,"saved":false}
{"ts":1342252502218,"patch":[[{"diffs":[[0,"r minFileName;\r\n"],[1,"        \r\n        /* if it's js file - getting optimized version */\r\n"],[0,"        if(Minif"]],"start1":4707,"start2":4707,"length1":32,"length2":101}]],"length":20564,"saved":false}
{"ts":1342252566037,"patch":[[{"diffs":[[0,"=Minify."],[1,"_"],[0,"uglifyJS"]],"start1":4867,"start2":4867,"length1":16,"length2":17}]],"length":20565,"saved":false}
{"ts":1342252609393,"patch":[[{"diffs":[[0,"\r\n\r\n"],[-1,"\r\n/* function which minificate js-files\r\n * @pJSFiles_a              - varible, wich contain array\r\n *                            of js file names or string, if name\r\n *                            single, or object if postProcessing neaded\r\n *                              { Name:'1.js', Func: function(pFinalCode){} }\r\n * @pCache_b                - if true files do not writes on disk, just saves\r\n *                              in Minify Cache\r\n */\r\nexports.jsScripts=function jsScripts(pJSFiles_a, pCache_b){\r\n    'use strict';\r\n    /* подключаем модуль uglify-js\r\n     * если его нет - дальнейшая \r\n     * работа функции не имеет смысла\r\n     */\r\n    try{\r\n        var jsp = require(\"uglify-js\").parser;\r\n        var pro = require(\"uglify-js\").uglify;\r\n    }catch(error){\r\n        console.log('can\\'n load uglify-js\\n'                  +\r\n            'to use js-minification you need to install uglify-js\\n'    +\r\n                'npm install uglify-js\\n'                               +\r\n                'https://github.com/mishoo/UglifyJS');\r\n        return false;\r\n    }\r\n    var lLastFileName;\r\n    \r\n    /* if passed string, or object \r\n     * putting it to array\r\n     */\r\n    if (typeof pJSFiles_a === 'string' ||\r\n        !pJSFiles_a[0])\r\n            pJSFiles_a=[pJSFiles_a];                \r\n    \r\n    var dataReaded_f=function(pFileName, pData){        \r\n        /*\r\n         * if postProcessing function exist\r\n         * getting it from pFileName object\r\n         */\r\n        var lMoreProcessing_f;\r\n        if(typeof pFileName === 'object'){\r\n            var lName;\r\n            for(lName in pFileName){\r\n                break;\r\n            }\r\n            lMoreProcessing_f = pFileName[lName];            \r\n            pFileName = lName;\r\n        }\r\n        console.log('file ' + pFileName + ' readed');\r\n        \r\n        if (!isFileChanged(pFileName, pData)) {\r\n            console.log('file: ' + pFileName + ' do not changed...');\r\n            return;\r\n        }\r\n        \r\n        /*********************************/\r\n        /* сжимаем код через uglify-js */\r\n        var uglify_js=function(pDdata){\r\n            var orig_code = pDdata.toString();\r\n            var ast = jsp.parse(orig_code); // parse code and get the initial AST\r\n            ast = pro.ast_mangle(ast); // get a new AST with mangled names\r\n            ast = pro.ast_squeeze(ast); // get an AST with compression optimizations\r\n            var result_code = pro.gen_code(ast); // compressed code here\r\n            return result_code;\r\n        };\r\n        /*********************************/\r\n        var final_code=uglify_js(pData);\r\n        \r\n        var minFileName=pFileName.replace('.js','.min.js');\r\n        \r\n        /* если мы сжимаем client.js -\r\n         * меняем строку cloudfunc.js на\r\n         * cloudfunc.min.js и выводим сообщение\r\n         *\r\n         * меняем строку keyBinding.js на\r\n         * keyBinding.min.js\r\n         * если другой файл - ничего не деалем\r\n         */             \r\n        \r\n        /* if lMoreProcessing_f seeted up \r\n         * and function associated with\r\n         * current file name exists -\r\n         * run it\r\n         */\r\n        if(lMoreProcessing_f                    &&    \r\n            typeof lMoreProcessing_f === \"function\"){\r\n                final_code = lMoreProcessing_f(final_code);\r\n        }                   \r\n        \r\n        minFileName = path.basename(minFileName);\r\n                \r\n        /* записываем сжатый js-скрипт\r\n         * в кэш если установлен pCache_b\r\n         * или на диск, если не установлен\r\n         */\r\n        if(pCache_b){\r\n            exports.Cache[minFileName] = final_code;\r\n            console.log('file ' + minFileName + ' saved to cache...');\r\n        }\r\n        else{\r\n            /* minimized file will be in min file\r\n             * if it's possible if not -\r\n             * in root\r\n             */\r\n            minFileName = MinFolder + minFileName;\r\n            \r\n            fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n        }\r\n    };\r\n    \r\n    var lName;\r\n    /* moving thru all elements of js files array */\r\n    for(var i=0; pJSFiles_a[i]; i++){\r\n        /* if postProcessing function exist\r\n         * getting file name and passet next\r\n         */\r\n        var lMoreProcessing_o = pJSFiles_a[i];        \r\n        if(typeof lMoreProcessing_o === 'object'){\r\n            for(lName in lMoreProcessing_o){\r\n            }\r\n        }else lName = pJSFiles_a[i];\r\n        console.log('reading file ' + lName + '...');        \r\n        \r\n        fs.readFile(lName, fileReaded(pJSFiles_a[i], dataReaded_f));\r\n    }\r\n    /* saving the name of last readed file for hash saving function */\r\n    lLastFileName = lName;\r\n    \r\n    return true;\r\n};\r\n\r\n"],[0,"/* ф"]],"start1":6843,"start2":6843,"length1":4766,"length2":8}]],"length":15807,"saved":false}
{"ts":1342252708967,"patch":[[{"diffs":[[0,"*******/\r\n\r\n"],[1,"/*********************************/\r\n/* сжимаем код через clean-css */\r\nMinify._clean_css=function(pData){\r\n    'use strict';\r\n     /* connecting cleanCSS,\r\n      * if we can't find it -\r\n      * return false\r\n      */\r\n     var cleanCSS;\r\n     try{\r\n        cleanCSS = require('clean-css');\r\n    }catch(error){\r\n        console.log('can\\'n load clean-css \\n'                          +\r\n            'to use css-minification you need to install clean-css \\n'  +\r\n                'npm install clean-css\\n'                               +\r\n                'https://github.com/GoalSmashers/clean-css');\r\n        return false;\r\n    }\r\n        /* Сохраняем весь стиль в одну переменную*/            \r\n        return cleanCSS.process(pData);\r\n};\r\n/*********************************/\r\n\r\n\r\n"],[0,"/*\r\n * Функц"]],"start1":2335,"start2":2335,"length1":24,"length2":806},{"diffs":[[0,"    "],[-1,"'use strict';\r\n    \r\n     /* connecting cleanCSS,\r\n      * if we can't find it -\r\n      * return false\r\n      */\r\n     var cleanCSS;\r\n     try{\r\n        cleanCSS = require('clean-css');\r\n    }catch(error){\r\n        console.log('can\\'n load clean-css \\n'                          +\r\n            'to use css-minification you need to install clean-css \\n'  +\r\n                'npm install clean-css\\n'                               +\r\n                'https://github.com/GoalSmashers/clean-css');\r\n        return false;\r\n    }\r\n"],[0,"    "]],"start1":8082,"start2":8082,"length1":533,"length2":8},{"diffs":[[0,"    "],[-1,"/*********************************/\r\n        /* сжимаем код через clean-css */\r\n        var clean_css=function(pData){\r\n            /* Сохраняем весь стиль в одну переменную*/            \r\n            return cleanCSS.process(pData);\r\n        };\r\n        /*********************************/"],[0,"\r\n  "]],"start1":8445,"start2":8445,"length1":297,"length2":8}]],"length":15775,"saved":false}
{"ts":1342252714178,"patch":[[{"diffs":[[0,"          \r\n"],[-1,"    "],[0,"    return c"]],"start1":3031,"start2":3031,"length1":28,"length2":24}]],"length":15771,"saved":false}
{"ts":1342252725917,"patch":[[{"diffs":[[0,"code;\r\n}"],[1,";"],[0,"\r\n/*****"]],"start1":2298,"start2":2298,"length1":16,"length2":17}]],"length":15772,"saved":false}
{"ts":1342252814984,"patch":[[{"diffs":[[0,"me,'js')){\r\n"],[1,"            \r\n"],[0,"            "]],"start1":5612,"start2":5612,"length1":24,"length2":38},{"diffs":[[0,"Data);        \r\n"],[-1,""],[0,"            minF"]],"start1":5679,"start2":5679,"length1":32,"length2":32},{"diffs":[[0,"');           \r\n"],[1,"            \r\n        }else if(Minify._checkExtension(pFileName,'js'){\r\n            \r\n            var final_code=clean_css(pData);\r\n        \r\n        lAllStyle+=final_code;\r\n        \r\n        var minFileName=pFileName.replace('.css','.min.css');           \r\n           \r\n        ++lCSSFiles_doneCount;\r\n        \r\n        /* if all files writed we\r\n         * save all minimized css \r\n         * to one file all.min.css\r\n         */                \r\n        if(pCSSFiles_a.length === lCSSFiles_doneCount){\r\n            /* если включена конвертация картинок в base64\r\n             * вызываем её\r\n             */\r\n            if(pImgConvertToBase64_b)\r\n                base64_images(lAllStyle);\r\n            else\r\n                fs.writeFile(MinFolder + 'all.min.css', lAllStyle, fileWrited(MinFolder + 'all.min.css'));\r\n        }\r\n         /* в другом случае - записываем сжатый css файл*/\r\n        else{\r\n            minFileName = MinFolder + path.basename(minFileName); \r\n            fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n        }\r\n            \r\n"],[0,"        }else\r\n "]],"start1":5751,"start2":5751,"length1":32,"length2":1107},{"diffs":[[0,"       }"],[-1,"else"],[0,"\r\n      "]],"start1":6843,"start2":6843,"length1":20,"length2":16},{"diffs":[[0,"    "],[-1,"var final_code=clean_css(pData);\r\n        \r\n        lAllStyle+=final_code;\r\n        \r\n        var minFileName=pFileName.replace('.css','.min.css');           \r\n           \r\n        ++lCSSFiles_doneCount;\r\n        \r\n        /* if all files writed we\r\n         * save all minimized css \r\n         * to one file all.min.css\r\n         */                \r\n        if(pCSSFiles_a.length === lCSSFiles_doneCount){\r\n            /* если включена конвертация картинок в base64\r\n             * вызываем её\r\n             */\r\n            if(pImgConvertToBase64_b)\r\n                base64_images(lAllStyle);\r\n            else\r\n                fs.writeFile(MinFolder + 'all.min.css', lAllStyle, fileWrited(MinFolder + 'all.min.css'));\r\n        }\r\n         /* в другом случае - записываем сжатый css файл*/\r\n        else{\r\n            minFileName = MinFolder + path.basename(minFileName); \r\n            fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n        }"],[0,"\r\n  "]],"start1":9537,"start2":9537,"length1":969,"length2":8}]],"length":15896,"saved":false}
{"ts":1342253047780,"patch":[[{"diffs":[[0,"me,'js')){\r\n"],[-1,"            \r\n"],[0,"            "]],"start1":5612,"start2":5612,"length1":38,"length2":24},{"diffs":[[0,"Data);        \r\n"],[1,""],[0,"            minF"]],"start1":5665,"start2":5665,"length1":32,"length2":32},{"diffs":[[0,"  \r\n"],[-1,"            \r\n        }else if(Minify._checkExtension(pFileName,'js'){\r\n            \r\n            var final_code=clean_css(pData);\r\n        \r\n        lAllStyle+=final_code;\r\n        \r\n        var minFileName=pFileName.replace('.css','.min.css');           \r\n           \r\n        ++lCSSFiles_doneCount;\r\n        \r\n        /* if all files writed we\r\n         * save all minimized css \r\n         * to one file all.min.css\r\n         */                \r\n        if(pCSSFiles_a.length === lCSSFiles_doneCount){\r\n            /* если включена конвертация картинок в base64\r\n             * вызываем её\r\n             */\r\n            if(pImgConvertToBase64_b)\r\n                base64_images(lAllStyle);\r\n            else\r\n                fs.writeFile(MinFolder + 'all.min.css', lAllStyle, fileWrited(MinFolder + 'all.min.css'));\r\n        }\r\n         /* в другом случае - записываем сжатый css файл*/\r\n        else{\r\n            minFileName = MinFolder + path.basename(minFileName); \r\n            fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n        }\r\n            \r\n"],[0,"    "]],"start1":5749,"start2":5749,"length1":1083,"length2":8},{"diffs":[[0,"     \r\n        }"],[1,"else"],[0,"\r\n            re"]],"start1":5746,"start2":5746,"length1":32,"length2":36},{"diffs":[[0,"  \r\n        "],[1,"var final_code=Minify._clean_css(pData);\r\n        \r\n        lAllStyle+=final_code;\r\n        \r\n        var minFileName=pFileName.replace('.css','.min.css');           \r\n           \r\n        ++lCSSFiles_doneCount;\r\n        \r\n        /* if all files writed we\r\n         * save all minimized css \r\n         * to one file all.min.css\r\n         */                \r\n        if(pCSSFiles_a.length === lCSSFiles_doneCount){\r\n            /* если включена конвертация картинок в base64\r\n             * вызываем её\r\n             */\r\n            if(pImgConvertToBase64_b)\r\n                base64_images(lAllStyle);\r\n            else\r\n                fs.writeFile(MinFolder + 'all.min.css', lAllStyle, fileWrited(MinFolder + 'all.min.css'));\r\n        }\r\n         /* в другом случае - записываем сжатый css файл*/\r\n        else{\r\n            minFileName = MinFolder + path.basename(minFileName); \r\n            fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n        }"],[0,"\r\n    };\r\n  "]],"start1":8444,"start2":8444,"length1":24,"length2":993}]],"length":15780,"saved":false}
{"ts":1342253070730,"patch":[[{"diffs":[[0,"y._clean"],[-1,"_css"],[1,"CSS"],[0,"=functio"]],"start1":2425,"start2":2425,"length1":20,"length2":19},{"diffs":[[0,"lean"],[-1,"_css"],[1,"CSS"],[0,"(pDa"]],"start1":8479,"start2":8479,"length1":12,"length2":11}]],"length":15778,"saved":false}
{"ts":1342253141116,"patch":[[{"diffs":[[0,"d');"],[-1,"                \r\n        /*********************************/\r\n        /* сжимаем код через clean-css */\r\n        var html_minify=function(pData){\r\n            /* Сохраняем весь стиль в одну переменную*/            \r\n            \r\n            var lOptions={\r\n                removeComments:                 true,\r\n                removeCommentsFromCDATA:        true,\r\n                removeCDATASectionsFromCDATA:   true,\r\n                collapseWhitespace:             true,\r\n                collapseBooleanAttributes:      true,\r\n                removeAttributeQuotes:          true,\r\n                removeRedundantAttributes:      true,\r\n                useShortDoctype:                true,\r\n                removeEmptyAttributes:          true,\r\n                /* оставляем, поскольку у нас\r\n                 * в элемент fm генерируеться\r\n                 * таблица файлов\r\n                 */\r\n                removeEmptyElements:            false,\r\n                removeOptionalTags:             true,\r\n                removeScriptTypeAttributes:     true,\r\n                removeStyleLinkTypeAttributes:  true\r\n            };\r\n            \r\n            \r\n            return htmlMinifier.minify(pData,lOptions);\r\n        };\r\n        /*********************************/"],[0,"\r\n  "]],"start1":10737,"start2":10737,"length1":1288,"length2":8}]],"length":14498,"saved":false}
{"ts":1342253147905,"patch":[[{"diffs":[[0,"ode="],[1,"Minify."],[0,"html"],[-1,"_m"],[1,"M"],[0,"inif"]],"start1":10762,"start2":10762,"length1":14,"length2":20}]],"length":14504,"saved":false}
{"ts":1342253184583,"patch":[[{"diffs":[[0,"};\r\n"],[-1,"/*********************************/\r\n\r\n/*********************************/"],[0,""],[1,""],[0,"\r\n/*"]],"start1":2305,"start2":2305,"length1":82,"length2":8},{"diffs":[[0,"rocess(pData"],[-1,""],[0,""],[1,");\r\n};\r\n\r\n/* сжимаем код через htmlMinify */\r\nvar html_minify=function(pData){\r\n    /* Сохраняем весь стиль в одну переменную*/            \r\n    \r\n    var lOptions={\r\n        removeComments:                 true,\r\n        removeCommentsFromCDATA:        true,\r\n        removeCDATASectionsFromCDATA:   true,\r\n        collapseWhitespace:             true,\r\n        collapseBooleanAttributes:      true,\r\n        removeAttributeQuotes:          true,\r\n        removeRedundantAttributes:      true,\r\n        useShortDoctype:                true,\r\n        removeEmptyAttributes:          true,\r\n        /* оставляем, поскольку у нас\r\n         * в элемент fm генерируеться\r\n         * таблица файлов\r\n         */\r\n        removeEmptyElements:            false,\r\n        removeOptionalTags:             true,\r\n        removeScriptTypeAttributes:     true,\r\n        removeStyleLinkTypeAttributes:  true\r\n    };\r\n    \r\n    \r\n    return htmlMinifier.minify(pData,lOptions"],[0,");\r\n};\r\n/***"]],"start1":2990,"start2":2990,"length1":24,"length2":985}]],"length":15391,"saved":false}
{"ts":1342253199087,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"var "],[1,"Minify."],[0,"html"],[-1,"_m"],[1,"M"],[0,"inif"]],"start1":3044,"start2":3044,"length1":18,"length2":20}]],"length":15393,"saved":false}
{"ts":1342253253856,"patch":[[{"diffs":[[0,"    "],[-1,"\r\n     /* connecting cleanCSS,\r\n      * if we can't find it -\r\n      * return false\r\n      */\r\n     var htmlMinifier;\r\n     try{\r\n        htmlMinifier = require('html-minifier');\r\n    }catch(error){\r\n        console.log('can\\'n load html-minifier \\n'                 +\r\n            'to use html-minification you need to install html-minifier\\n'  +\r\n                'npm install html-minifier\\n'                               +\r\n                'https://github.com/kangax/html-minifier');\r\n        return false;\r\n    }\r\n"],[0,"    "]],"start1":10806,"start2":10806,"length1":527,"length2":8}]],"length":14874,"saved":false}
{"ts":1342253279954,"patch":[[{"diffs":[[0,"tion(pData){"],[1,"        "],[0,"\r\n    /* Сох"]],"start1":3070,"start2":3070,"length1":24,"length2":32},{"diffs":[[0,"          \r\n"],[1,"     \r\n     /* connecting cleanCSS,\r\n      * if we can't find it -\r\n      * return false\r\n      */\r\n     var htmlMinifier;\r\n     try{\r\n        htmlMinifier = require('html-minifier');\r\n    }catch(error){\r\n        console.log('can\\'n load html-minifier \\n'                 +\r\n            'to use html-minification you need to install html-minifier\\n'  +\r\n                'npm install html-minifier\\n'                               +\r\n                'https://github.com/kangax/html-minifier');\r\n        return false;\r\n    }\r\n"],[0,"    \r\n    va"]],"start1":3141,"start2":3141,"length1":24,"length2":548}]],"length":15406,"saved":false}
{"ts":1342253350682,"patch":[[{"diffs":[[0,"eName, pData){\r\n"],[1,"        \r\n"],[0,"        console."]],"start1":9771,"start2":9771,"length1":32,"length2":42},{"diffs":[[0,"                "],[-1,"\r\n"],[0,"        \r\n      "]],"start1":9850,"start2":9850,"length1":34,"length2":32}]],"length":15414,"saved":false}
{"ts":1342253353036,"patch":[[{"diffs":[[0,"        "],[-1,"                "],[0,"\r\n      "]],"start1":9850,"start2":9850,"length1":32,"length2":16}]],"length":15398,"saved":false}
{"ts":1342253354641,"patch":[[{"diffs":[[0,"FileName, pData)"],[1," "],[0,"{\r\n        \r\n   "]],"start1":9768,"start2":9768,"length1":32,"length2":33}]],"length":15399,"saved":false}
{"ts":1342253720785,"patch":[[{"diffs":[[0,"      \r\n"],[1,"   "],[0," var dat"]],"start1":6183,"start2":6183,"length1":16,"length2":19},{"diffs":[[0,"me,'js')){\r\n"],[1,"            \r\n"],[0,"            "]],"start1":7035,"start2":7035,"length1":24,"length2":38},{"diffs":[[0,"');           \r\n"],[1,"            \r\n        } else if (Minify._checkExtension(pFileName,'html')) {\r\n            \r\n            final_code=Minify.htmlMinify(pData);                \r\n            minFileName=pFileName.replace('.html','.min.html');\r\n            \r\n"],[0,"        }else\r\n "]],"start1":7174,"start2":7174,"length1":32,"length2":269},{"diffs":[[0,"\r\n\r\n"],[-1,"/* функция сжимает html файлы\r\n * и сохраняет их с именем .min.html\r\n * @pHTMLFiles_a - массим имен html\r\n * файлов, или строка если имя одно\r\n */\r\nexports.html=function(pHTMLFiles_a){\r\n    'use strict';\r\n            \r\n    /* if html file names is not array\r\n     * making it array\r\n     */\r\n    if (typeof pHTMLFiles_a === 'string' || \r\n        !pHTMLFiles_a[0])\r\n            pHTMLFiles_a=[pHTMLFiles_a];\r\n    var dataReaded_f=function(pFileName, pData){\r\n        console.log('file ' + pFileName + ' readed');\r\n        var final_code=Minify.htmlMinify(pData);\r\n                \r\n        var minFileName=pFileName.replace('.html','.min.html');\r\n                    \r\n         /* adding Min folder to file path */\r\n         minFileName = MinFolder + minFileName;\r\n         /* записываем сжатый html файл*/\r\n        fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n    };\r\n        \r\n     /* moving thru all elements of html files array */\r\n    for(var i=0;pHTMLFiles_a[i];i++){\r\n        console.log('reading file ' + pHTMLFiles_a[i]+'...');\r\n        fs.readFile(pHTMLFiles_a[i],fileReaded(pHTMLFiles_a[i],dataReaded_f));\r\n    }\r\n    \r\n    return true;\r\n};\r\n"],[0,"\r\n/*"]],"start1":11376,"start2":11376,"length1":1179,"length2":8}]],"length":14482,"saved":false}
