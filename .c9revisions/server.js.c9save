{"ts":1340783277756,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\"use strict\";\r\n\r\n/* Обьект содержащий все функции и переменные \r\n * серверной части Cloud Commander'а\r\n */\r\nvar CloudServer={\r\n    /* функция, которая генерирует заголовки\r\n     * файлов, отправляемые сервером клиенту\r\n     */\r\n    generateHeaders :function(){},\r\n    /* функция высылает\r\n     * данные клиенту\r\n     */\r\n    sendResponse        :function(){},\r\n    /* Структура содержащая функции,\r\n     * и переменные, в которых\r\n     * говориться о поддерживаемых\r\n     * браузером технологиях\r\n     */\r\n    BrowserSuport   :{},\r\n     /* Обьект для работы с кэшем */\r\n    Cashe                   :{},\r\n    /* Обьект через который\r\n     * выполняеться сжатие\r\n     * скриптов и стилей\r\n     */\r\n    Minify                  :{},\r\n    /* Асоциативный масив обьектов для\r\n     * работы с ответами сервера\r\n     * высылаемыми на запрос о файле и\r\n     * хранащий информацию в виде\r\n     * Responces[name]=responce;\r\n     */\r\n    Responses               :{},\r\n    \r\n    /* ПЕРЕМЕННЫЕ */\r\n    /* Поддержка браузером JS*/\r\n    NoJS            :true,    \r\n    /* Поддержка gzip-сжатия\r\n     * браузером\r\n     */\r\n    Gzip            :undefined,\r\n    \r\n    /* КОНСТАНТЫ */\r\n    /* index.html */\r\n    INDEX           :'index.html',\r\n    /* name of direcotory with libs */\r\n    LIBDIR          :'./lib',\r\n    LIBDIRSERVER    :'./lib/server'\r\n};\r\n\r\n/* \r\n * Обьект для работы с кэшем\r\n * аналог клиентского обьекта\r\n * с тем отличием, что в нём\r\n * будут храниться серверные\r\n * данные, такие как файлы\r\n * отдаваемые клиенту\r\n * (файлы проэкта по большому\r\n * счёту, для ускорения\r\n * первичной загрузки)\r\n */\r\nCloudServer.Cache={\r\n    _allowed            :true,     /* приватный переключатель возможности работы с кэшем */\r\n    /* данные в которых храняться файлы \r\n     * в формате <поле> : <значение>\r\n     * _data[name]=pData;\r\n     * одному имени соответствуют \r\n     * одни данные\r\n     */\r\n    _data               :{},\r\n    \r\n    /* функция говорит можно ли работать с кэшем */\r\n    isAllowed           :(function(){\r\n        return CloudServer.Cache._allowed;\r\n        }),\r\n    /* функция устанавливает возможность работать с кэшем */\r\n    setAllowed          :(function(pAllowed){\r\n       CloudServer.Cache._allowed=pAllowed;\r\n    }),\r\n    /* Если доступен кэш\r\n     * сохраняем в него данные\r\n     */\r\n    set                  :(function(pName, pData){\r\n        if(CloudServer.Cache._allowed && pName && pData){\r\n           CloudServer.Cache._data[pName]=pData;\r\n        }\r\n    }),\r\n    /* Если доступен Cache принимаем из него данные*/\r\n    get                 :(function(pName){\r\n        if(CloudServer.Cache._allowed && pName){\r\n            return CloudServer.Cache._data[pName];\r\n        }\r\n        else return null;\r\n    }),\r\n    \r\n    /* Функция очищает кэш*/\r\n    clear               :(function(){\r\n        if(CloudServer.Cache._allowed){\r\n            CloudServer.Cache._data={};\r\n        }\r\n    })\r\n};\r\n\r\n/* Обьект для сжатия скриптов и стилей\r\n * по умолчанию - сжимаються\r\n */\r\nCloudServer.Minify={\r\n    /* приватный переключатель минимизации */\r\n    _allowed               :{css:true,js:true,html:true, img: true},\r\n    \r\n    /* функция разрешает или \r\n     * запрещает минимизировать\r\n     * css/js/html\r\n     * @pAllowed: - структура, в которой\r\n     *              передаються параметры\r\n     *              минификации, вида\r\n     *              {js:true,css:true,html:false; img:true}\r\n     * img отвечает за перевод картинок в base64\r\n     * и сохранение их в css-файл\r\n     */\r\n    setAllowed              :(function(pAllowed){\r\n       if(pAllowed){\r\n           this._allowed.css=pAllowed.css; \r\n           this._allowed.js=pAllowed.js; \r\n           this._allowed.html=pAllowed.html; \r\n           this._allowed.img=pAllowed.img; \r\n       }\r\n    }),\r\n        \r\n    /*\r\n     * Функция минимизирует css/js/html\r\n     * если установлены параметры минимизации\r\n     */\r\n    doit                    :(function(){\r\n        if(this._allowed.css ||\r\n            this._allowed.js ||\r\n            this._allowed.html){\r\n                var lMinify      = require(CloudServer.LIBDIRSERVER+'/minify');\r\n\r\n                this.done.js=this._allowed.js?lMinify.jsScripts():false;\r\n                this.done.html=this._allowed.html?lMinify.html():false;\r\n                this.done.css=this._allowed.css?lMinify.cssStyles(this._allowed.img):false;\r\n        }\r\n    }),\r\n    /* свойство показывающее случилась ли ошибка*/\r\n    done:{js: false,css: false, html:false}\r\n};\r\n\r\n\r\nvar LeftDir='/';\r\nvar RightDir=LeftDir;\r\n/*\r\n    var Path    = require('path');\r\n*/   /* модуль для работы с путями*/\r\n\r\nvar Fs          = require('fs');    /* модуль для работы с файловой системой*/\r\n\r\nvar Zlib;\r\n/* node v0.4 not contains zlib \r\n */\r\ntry{\r\n    Zlib        = require('zlib');  /* модуль для сжатия данных gzip-ом*/\r\n}catch(error){\r\n    Zlib=undefined;\r\n    console.log('to use gzip-commpression' +\r\n        'you should install zlib module\\n' +\r\n        'npm install zlib');\r\n}\r\nvar CloudFunc   = require(CloudServer.LIBDIR + \r\n                (CloudServer.Minify.done.js?/* если стоит минификация*/\r\n                    '/cloudfunc.min':/* добавляем сжатый - иначе обычный */\r\n                    '/cloudfunc'));  /* модуль с функциями */\r\n/* конструктор*/\r\nCloudServer.init=(function(){\r\n    /* Переменная в которой храниться кэш*/\r\n    CloudServer.Cache.setAllowed(true);\r\n    /* Change default parameters of\r\n     * js/css/html minification\r\n     */\r\n    CloudServer.Minify.setAllowed({\r\n        js:true,\r\n        css:true,\r\n        html:true,\r\n        img:true\r\n    });\r\n    /* Если нужно минимизируем скрипты */\r\n    CloudServer.Minify.doit();\r\n});\r\n\r\n\r\n/* создаём сервер на порту 31337*/\r\nCloudServer.start=function()\r\n{\r\n    CloudServer.init();\r\n    \r\n    var http = require('http');    \r\n    http.createServer(CloudServer._controller).listen(process.env.PORT ||\r\n        process.env.VCAP_APP_PORT /* cloudfoundry */      ||\r\n        31337,\r\n        '0.0.0.0' || '127.0.0.1');\r\n    console.log('Cloud Commander server running at http://127.0.0.1:'+\r\n        (process.env.PORT===undefined?31337:process.env.PORT));\r\n};\r\n\r\n\r\n/* Функция создаёт заголовки файлов\r\n * в зависимости от расширения файла\r\n * перед отправкой их клиенту\r\n * @pName - имя файла\r\n * @pGzip - данные сжаты gzip'ом\r\n */\r\nCloudServer.generateHeaders = function(pName, pGzip){\r\n    var lType='';\r\n    /* высылаем заголовок в зависимости от типа файла */\r\n    /* если расширение у файла css -\r\n     * загружаем стили\r\n     */\r\n    if(CloudFunc.checkExtension(pName,'css'))\r\n        lType='text/css';\r\n    /* загружаем js */\r\n    else if(CloudFunc.checkExtension(pName,'js'))\r\n        lType='text/javascript';\r\n    /* загружаем картинки*/\r\n    else if(CloudFunc.checkExtension(pName,'png'))\r\n        lType='image/png';\r\n    /* загружаем json*/\r\n    else if(CloudFunc.checkExtension(pName,'json'))\r\n        lType='application/json';\r\n    else if(CloudFunc.checkExtension(pName,'html'))\r\n        lType='text/html';        \r\n    else if(CloudFunc.checkExtension(pName,'appcache'))\r\n        lType='text/cache-manifest';        \r\n    /* если это неизвестный тип файла - \r\n     * высылаем его просто как текст\r\n     */\r\n    else lType='text/plain';\r\n        \r\n    return {\r\n        /* if type of file any, but img - \r\n         * then we shoud specify charset \r\n         */\r\n        'Content-Type': lType + (lType.indexOf('img')<0?'; charset=UTF-8':''),\r\n        'cache-control': 'max-age='+(31337*21),\r\n        'last-modified': new Date().toString(),\r\n        'content-encoding': pGzip?'gzip':'',\r\n        /* https://developers.google.com/speed/docs/best-practices/caching?hl=ru#LeverageProxyCaching */\r\n        'Vary': 'Accept-Encoding'\r\n    };\r\n};\r\n\r\n/*\r\n * Главная функция, через которую проихсодит\r\n * взаимодействие, обмен данными с клиентом\r\n * @req - запрос клиента (Request)\r\n * @res - ответ сервера (Response)\r\n */\r\nCloudServer._controller=function(pReq, pRes)\r\n{\r\n    /* Читаем содержимое папки,\r\n        переданное в url\r\n    */\r\n    var url = require(\"url\");\r\n    var pathname = url.parse(pReq.url).pathname;\r\n    console.log('pathname: '+pathname);\r\n    \r\n     /* получаем поддерживаемые браузером кодировки*/\r\n     var lAcceptEncoding = pReq.headers['accept-encoding'];\r\n    /* запоминаем поддерживает ли браузер\r\n     * gzip-сжатие при каждом обращении к серверу\r\n     * и доступен ли нам модуль zlib\r\n     */ \r\n    if (lAcceptEncoding && \r\n        lAcceptEncoding.match(/\\bgzip\\b/) &&\r\n        Zlib){\r\n        CloudServer.Gzip=true;\r\n    }else \r\n        CloudServer.Gzip=false;\r\n    /* путь в ссылке, который говорит\r\n     * что js отключен\r\n     */\r\n    var lNoJS_s=CloudFunc.NOJS;\r\n    var lFS_s=CloudFunc.FS;\r\n    \r\n    if(pathname!=='/favicon.ico')\r\n    {    \r\n        console.log(\"request for \" + pathname + \" received...\");\r\n        var lName;\r\n                        \r\n        /* если в пути нет информации ни о ФС,\r\n         * ни об отсутствии js,\r\n         * ни о том, что это корневой\r\n         * каталог - загружаем файлы проэкта\r\n         */\r\n        if(pathname.indexOf(lFS_s)<0 &&\r\n            pathname.indexOf(lNoJS_s)<0 &&\r\n            pathname!=='/'){\r\n            /* если имена файлов проекта - загружаем их*/  \r\n            /* убираем слеш и читаем файл с текущец директории*/\r\n            //lName=Path.basename(pathname);\r\n            \r\n            /* добавляем текующий каталог к пути */\r\n            lName='.'+pathname;\r\n            console.log('reading '+lName);\r\n            /* сохраняем указатель на responce и имя */\r\n            CloudServer.Responses[lName]=pRes;\r\n            \r\n            /* Берём значение из кэша\r\n             * сжатый файл - если gzip-поддерживаеться браузером\r\n             * не сжатый - в обратном случае\r\n             */\r\n            var lFileData=CloudServer.Cache.get(CloudServer.Gzip?(lName+'_gzip'):lName);\r\n\r\n            var lReadFileFunc_f=CloudServer.getReadFileFunc(lName);\r\n            /* если там что-то есть передаём данные в функцию\r\n             * readFile\r\n             */\r\n            if(lFileData){\r\n                console.log('readed from cache');\r\n                /* передаём данные с кэша,\r\n                 * если gzip включен - сжатые\r\n                 * в обратном случае - несжатые\r\n                 */\r\n                lReadFileFunc_f(undefined,lFileData,true);\r\n            }\r\n            else Fs.readFile(lName,lReadFileFunc_f);\r\n            \r\n        }else{/* если мы имеем дело с файловой системой*/\r\n            /* если путь не начинаеться с no-js - значит \r\n             * js включен\r\n             */\r\n            /* убираем пометку cloud, без которой c9.io\r\n             * не работает поскольку путь из двух слешей\r\n             * (/fs/no-js/) - очень короткий, нужно\r\n             * длиннее\r\n             */\r\n            \r\n            if(pathname.indexOf(lNoJS_s)!==lFS_s.length && pathname!=='/'){\r\n                CloudServer.NoJS=false;\r\n            }else pathname=pathname.replace(lNoJS_s,'');\r\n            \r\n            /* убираем индекс файловой системы */\r\n            if(pathname.indexOf(lFS_s)===0){\r\n                pathname=pathname.replace(lFS_s,'');\r\n                /* если посетитель только зашел на сайт\r\n                 * no-js будет пустым, как и fs\r\n                 */                       \r\n            /* если в пути нету fs - посетитель только зашел на сайт\r\n             * загружаем его полностью.\r\n             */\r\n            }else CloudServer.NoJS=true;\r\n            /* если в итоге путь пустой\r\n             * делаем его корневым\r\n             */                         \r\n            if(pathname==='')pathname='/';\r\n            \r\n            RightDir=pathname;\r\n            LeftDir=pathname;\r\n            \r\n            /* если встретиться пробел - \r\n             * меня код символа пробела на пробел\r\n             */\r\n            \r\n            LeftDir=CloudFunc.replaceSpaces(LeftDir);\r\n            RightDir=CloudFunc.replaceSpaces(RightDir);\r\n            \r\n            /* Проверяем с папкой ли мы имеем дело */\r\n            \r\n            /* читаем сновные данные о файле */\r\n            var lStat;\r\n            try{\r\n                lStat=Fs.statSync(LeftDir);\r\n            }catch(error){\r\n                console.log(error);\r\n                CloudServer.Responses[LeftDir]=pRes;\r\n                CloudServer.sendResponse('OK',error.toString(),LeftDir);\r\n            }\r\n            /* если это каталог - \r\n             * читаем его содержимое\r\n             */\r\n            try{                    \r\n                /* если установлено сжатие\r\n                 * меняем название html-файла и\r\n                 * загружаем сжатый html-файл в дальнейшем\r\n                 */\r\n                CloudServer.INDEX=(CloudServer.Minify.done.html?'index.min.html':CloudServer.INDEX);\r\n                /*\r\n                 * сохраним указатель на response\r\n                 */            \r\n                CloudServer.Responses[CloudServer.INDEX]=pRes;\r\n                if(lStat.isDirectory())                    \r\n                    Fs.readdir(LeftDir,CloudServer._readDir);                \r\n                /* отдаём файл */\r\n                else if(lStat.isFile()){\r\n                    CloudServer.Responses[LeftDir]=pRes;\r\n                    Fs.readFile(LeftDir,CloudServer.getReadFileFunc(LeftDir));\r\n                    console.log('reading file: '+LeftDir);\r\n                }\r\n            }catch(error){console.log(error);}\r\n        }\r\n    }\r\n};\r\n\r\n/* Функция читает ссылку или выводит информацию об ошибке*/\r\nCloudServer._readDir=function (pError, pFiles)\r\n{\r\n    if(!pError)\r\n    {\r\n        /* данные о файлах в формате JSON*/\r\n        var lJSON=[];\r\n        var lJSONFile={};\r\n        /* Если мы не в корне добавляем слеш к будующим ссылкам */       \r\n       if(LeftDir!=='/')\r\n        {\r\n            RightDir+='/';\r\n            LeftDir+='/';\r\n        }\r\n\r\n        pFiles=pFiles.sort();\r\n                \r\n        lJSON[0]={path:LeftDir,size:'dir'};\r\n        var fReturnFalse=function returnFalse(){return false;};        \r\n        for(var i=0;i<pFiles.length;i++)\r\n        {\r\n            /* Получаем информацию о файле*/\r\n            var lStats;\r\n            try{\r\n                lStats=Fs.statSync(RightDir+pFiles[i]);\r\n            }catch(err){\r\n                console.log(err);\r\n                lStats={\r\n                    'mode':undefined,\r\n                    'size':undefined,\r\n                    'isDirectory':fReturnFalse\r\n                };\r\n            }\r\n            /*\r\n             *Переводим права доступа в 8-ричную систему\r\n             */\r\n            var lMode=(lStats.mode-0).toString(8);            \r\n                        \r\n            /* Если папка - выводим пиктограмму папки */\r\n            if(lStats.isDirectory())\r\n            {                \r\n                lJSONFile={'name':pFiles[i],'size':'dir','uid':lStats.uid,'mode':lMode};\r\n                lJSON[i+1]=lJSONFile;            \r\n            }\r\n            /* В противоположном случае - файла */\r\n            else\r\n            {\r\n                lJSONFile={'name':pFiles[i],'uid':lStats.uid,'size':lStats.size,'mode':lMode};\r\n                lJSON[i+1]=lJSONFile;\r\n            }\r\n        }\r\n        \r\n        /* заголовок ответа сервера */        \r\n        var lHeader;        \r\n        var lList;\r\n        /* если js недоступен */\r\n        /* если javascript отключен вылылаем html-код\r\n         * и прописываем соответствующие заголовки\r\n         */\r\n        \r\n        if(CloudServer.NoJS){\r\n            var lPanel=CloudFunc.buildFromJSON(lJSON);\r\n            lList='<ul id=left class=panel>';\r\n            lList+=lPanel;\r\n            lList+='</ul>';\r\n            \r\n            lList+='<ul id=right class=\"panel hidden\">';\r\n            lList+=lPanel;\r\n            lList+='</ul>';\r\n            try{\r\n                var lIndex;\r\n                /* пробуем достать данные из кэша\r\n                 * с жатием или без, взависимости\r\n                 * от настроек\r\n                 */\r\n                var lFileData=CloudServer.Cache.get(CloudServer.INDEX);\r\n                /* если их нет там - вычитываем из файла*/\r\n                if(!lFileData){\r\n                    lIndex=Fs.readFileSync(CloudServer.INDEX);\r\n                    /* и сохраняем в кэш */\r\n                    CloudServer.Cache.set(CloudServer.INDEX,lIndex);\r\n                }else lIndex=lFileData;\r\n                \r\n                /* если выбрана опция минифизировать скрпиты\r\n                 * меняем в index.html обычный client.js на\r\n                 * минифицированый\r\n                 */\r\n                lIndex=lIndex.toString();\r\n                \r\n                /* if scripts shoud be minified and\r\n                 * minification proceed sucessfully\r\n                 * we include minified version of\r\n                 * clien.js to index.html\r\n                 */\r\n\r\n                lIndex = CloudServer.Minify.done.css?\r\n                    lIndex.replace('<link rel=stylesheet href=\"/reset.css\">','')\r\n                        .replace('style.css','all.min.css')\r\n                    :lIndex;\r\n                      \r\n                lIndex = CloudServer.Minify.done.js?lIndex.replace('client.js','client.min.js'):lIndex;\r\n                \r\n                lIndex=lIndex.toString().replace('<div id=fm class=no-js>','<div id=fm class=no-js>'+lList);\r\n                /* меняем title */\r\n                lIndex=lIndex.replace('<title>Cloud Commander</title>',\r\n                    '<title>'+CloudFunc.setTitle()+'</title>');\r\n                /* отображаем панель быстрых клавишь */\r\n                lList=lIndex;\r\n                 /* если браузер поддерживает gzip-сжатие*/\r\n                lHeader=CloudServer.generateHeaders('text/html',CloudServer.Gzip);\r\n            }catch(error){console.log(error);}\r\n        }else{\r\n            /* в обычном режиме(когда js включен\r\n             * высылаем json-структуру файлов\r\n             * с соответствующими заголовками\r\n             */\r\n            lList=JSON.stringify(lJSON);\r\n            lHeader=CloudServer.generateHeaders('application/json',CloudServer.Gzip);\r\n        }\r\n        /* если браузер поддерживает gzip-сжатие - сжимаем данные*/                \r\n        if(CloudServer.Gzip){\r\n            Zlib.gzip(lList,CloudServer.getGzipDataFunc(lHeader,CloudServer.INDEX));\r\n        }\r\n        /* если не поддерживаеться - отсылаем данные без сжатия*/\r\n        else\r\n            CloudServer.sendResponse(lHeader,lList,CloudServer.INDEX);\r\n    }\r\n    else\r\n    {\r\n        console.log(pError);\r\n        CloudServer.sendResponse('OK',pError.toString());\r\n    }\r\n};\r\n\r\n/* Функция генерирует функция считывания файла\r\n * таким образом, что бы у нас было \r\n * имя считываемого файла\r\n * @pName - полное имя файла\r\n */\r\nCloudServer.getReadFileFunc = function(pName){\r\n/*\r\n * @pError  - ошибка\r\n * @pData   - данные\r\n * @pFromFile - прочитано с файла bool\r\n */    \r\n    var lReadFile=function(pError,pData,pFromCache_b){\r\n        if (!pError){\r\n            console.log('file ' + pName + ' readed');\r\n            \r\n            /* берём из кэша данные файла\r\n             * если их нет в кэше - \r\n             * сохраняем\r\n             */            \r\n            if(!pFromCache_b && CloudServer.Cache.isAllowed)\r\n                CloudServer.Cache.set(pName,pData);\r\n            /* если кэш есть\r\n             * сохраняем его в переменную\r\n             * которая до этого будет пустая\r\n             * по скольку мы будем вызывать этот метод\r\n             * сами, ведь файл уже вычитан\r\n             */\r\n            \r\n            var lHeader=CloudServer.generateHeaders(pName,CloudServer.Gzip);\r\n            /* если браузер поддерживает gzip-сжатие - сжимаем данные*/\r\n            if(CloudServer.Gzip &&!pFromCache_b){\r\n                /* сжимаем содержимое */\r\n                Zlib.gzip(pData,CloudServer.getGzipDataFunc(lHeader,pName));                \r\n            }\r\n            else{\r\n                /* высылаем несжатые данные */\r\n                CloudServer.sendResponse(lHeader,pData,pName);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            console.log(pError.path);\r\n            if(pError.path!=='passwd.json')\r\n            {\r\n                console.log(pError);\r\n                CloudServer.sendResponse('OK',pError.toString());\r\n            }else{\r\n                CloudServer.sendResponse('OK','passwd.json');\r\n            }            \r\n        }\r\n    };\r\n    return lReadFile;\r\n};\r\n\r\n/* Функция получает сжатые данные\r\n * @pHeader - заголовок файла\r\n */\r\nCloudServer.getGzipDataFunc=function(pHeader,pName){\r\n    return function(error,pResult){\r\n                    if(!error){\r\n                        /* отправляем сжатые данные\r\n                         * вместе с заголовком\r\n                         */                            \r\n                         /* если установлена работа с кэшем\r\n                          * сохраняем сжатые данные\r\n                          */\r\n                        if(CloudServer.Cache.isAllowed){\r\n                            /* устанавливаем кєш */\r\n                            console.log(pName+' gziped');\r\n                            CloudServer.Cache.set(pName+'_gzip',pResult);\r\n                        }\r\n                        CloudServer.sendResponse(pHeader,pResult,pName);                        \r\n                    }\r\n                    else{\r\n                        console.log(error);\r\n                        CloudServer.sendResponse(pHeader,error);\r\n                    }\r\n    };\r\n};\r\n/* Функция высылает ответ серверу \r\n * @pHead       - заголовок\r\n * @pData       - данные\r\n * @pName       - имя отсылаемого файла\r\n */\r\nCloudServer.sendResponse = function(pHead, pData,pName){\r\n    /* если у нас есть указатель на responce\r\n     * для соответствующего файла - \r\n     * высылаем его\r\n     */\r\n    var lResponse=CloudServer.Responses[pName];\r\n    if(lResponse){\r\n        lResponse.writeHead(200,pHead);\r\n        lResponse.end(pData);\r\n        console.log(pName+' sended');\r\n    }\r\n};\r\n\r\nCloudServer.start();"]],"start1":0,"start2":0,"length1":0,"length2":22010}]],"length":22010}
{"contributors":[],"silentsave":false,"ts":1341484885313,"patch":[[{"diffs":[[0,"/server'"],[-1,""],[0,""],[1,",\r\n    Port            :31337, /* server port */\r\n    IP              :'127.0.0.1'"],[0,"\r\n};\r\n\r\n"]],"start1":1322,"start2":1322,"length1":16,"length2":98},{"diffs":[[0,"\r\n/*"],[-1,"\r\n    var Path    = require('path');\r\n*/   /* модуль для работы с путями*/"],[1," модуль для работы с путями*/\r\nvar Path    = require('path');"],[0,"\r\n\r\n"]],"start1":4594,"start2":4594,"length1":82,"length2":69},{"diffs":[[0,"unction(){\r\n"],[1,"    /* Determining server.js directory\r\n     * and chang current process directory\r\n     * (usually /) to it.\r\n     * argv[1] - is always script name\r\n     */\r\n    var lServerDir = Path.dirname(process.argv[1]);\r\n    console.log('current dir: ' + process.cwd());\r\n    console.log('server dir:  ' + lServerDir);    \r\n    process.chdir(lServerDir);\r\n    \r\n    var lConfig={\r\n            \"cache\" : {\"allowed\" : true},\r\n            \"minification\" : {\r\n                \"js\"    : false,\r\n                \"css\"   : false,\r\n                \"html\"  : true,\r\n                \"img\"   : false\r\n            }\r\n        };\r\n    try{\r\n        console.log('reading configureation file config.json...');\r\n        lConfig=require('./config');\r\n        console.log('config.json readed');\r\n    }catch(pError){\r\n        console.log('warning: configureation file config.json not found...\\n'   +\r\n                    'using default values...\\n'                     +\r\n                    JSON.stringify(lConfig));\r\n    }\r\n    \r\n"],[0,"    /* Перем"]],"start1":5336,"start2":5336,"length1":24,"length2":1028},{"diffs":[[0,"Allowed("],[-1,"true"],[1,"lConfig.cache.allowed"],[0,");\r\n    "]],"start1":6422,"start2":6422,"length1":20,"length2":37},{"diffs":[[0,"wed("],[-1,"{\r\n        js:true,\r\n        css:true,\r\n        html:true,\r\n        img:true\r\n    }"],[1,"lConfig.minification"],[0,");\r\n"]],"start1":6564,"start2":6564,"length1":91,"length2":28},{"diffs":[[0,"ту 31337"],[-1,""],[0,""],[1," "],[0,"*/\r\nClou"]],"start1":6700,"start2":6700,"length1":16,"length2":17},{"diffs":[[0,"    "],[-1,"var http = require('http');"],[1,"/* constant ports of deployng servers \r\n        var lCloudFoundryPort   = process.env.VCAP_APP_PORT;\r\n "],[0,"    "],[-1,"\r\n"],[0,"   "],[-1," http.createServer(CloudServer._controller).listen(process.env.PORT ||\r\n"],[1,"var lNodesterPort       = process.env.app_port;\r\n        var lC9Port             = process.env.PORT;\r\n    */\r\n    CloudServer.Port = process.env.PORT            ||  /* c9           */\r\n                       process.env.app_port        ||  /* nodester     */\r\n               "],[0,"    "]],"start1":6777,"start2":6777,"length1":116,"length2":393},{"diffs":[[0,"PP_PORT "],[1,"  ||  "],[0,"/* cloud"]],"start1":7192,"start2":7192,"length1":16,"length2":22},{"diffs":[[0,"y */"],[1,"\r\n   "],[0,"      "],[-1,"||\r\n        31337,\r\n        '0.0.0.0' || '127.0.0.1');\r\n    console.log('Cloud Commander server running at http://127.0.0.1:'+\r\n        (process.env.PORT===undefined?31337:process.env.PORT));"],[1,"              CloudServer.Port;\r\n                     \r\n    CloudServer.IP   = process.env.IP             ||  /* c9           */\r\n                       CloudServer.IP;\r\n        \r\n    var http = require('http');    \r\n    http.createServer(CloudServer._controller).listen(\r\n        CloudServer.Port,\r\n        CloudServer.IP);\r\n        \r\n    console.log('Cloud Commander server running at http://' +\r\n        CloudServer.IP +\r\n        ':' + \r\n        CloudServer.Port);\r\n    /*\r\n        (!lC9Port?\r\n            (!lCloudFoundryPort?\r\n                (!lNodesterPort?31337:lNodesterPort)\r\n            :lCloudFoundryPort)\r\n        :lC9Port));\r\n    */"],[0,"\r\n};"]],"start1":7220,"start2":7220,"length1":205,"length2":664},{"diffs":[[0,"eadDir);"],[-1,"                "],[0,""],[1,""],[0,"\r\n      "]],"start1":14818,"start2":14818,"length1":32,"length2":16},{"diffs":[[0,"atch(err){\r\n"],[1,"                /*\r\n    "],[0,"            "]],"start1":15985,"start2":15985,"length1":24,"length2":48},{"diffs":[[0,".log(err);\r\n"],[1,"                */\r\n"],[0,"            "]],"start1":16044,"start2":16044,"length1":24,"length2":44},{"diffs":[[0," 'mode':"],[-1,"undefined"],[1,"0"],[0,",\r\n     "]],"start1":16121,"start2":16121,"length1":25,"length2":17},{"diffs":[[0," 'size':"],[-1,"undefined"],[1,"0"],[0,",\r\n     "]],"start1":16152,"start2":16152,"length1":25,"length2":17},{"diffs":[[0," href=\"/"],[1,"css/"],[0,"reset.cs"]],"start1":18730,"start2":18730,"length1":16,"length2":20},{"diffs":[[0,"eplace('"],[1,"/css/"],[0,"style.cs"]],"start1":18786,"start2":18786,"length1":16,"length2":21},{"diffs":[[0,"Error.toString()"],[-1,""],[0,""],[1,",pName"],[0,");\r\n            "]],"start1":22038,"start2":22038,"length1":32,"length2":38}]],"length":23807,"saved":false}
{"contributors":[],"silentsave":false,"ts":1342076412199,"patch":[[{"diffs":[[0,"r={\r\n    /* "],[-1,""],[0,""],[1,"main Cloud Commander configuration\r\n     * readed from config.json if it's\r\n     * exist\r\n     */\r\n    Config      : {\r\n                    \"cache\" : {\"allowed\" : true},\r\n                    \"minification\" : {\r\n                        \"js\"    : false,\r\n                        \"css\"   : false,\r\n                        \"html\"  : true,\r\n                        \"img\"   : false\r\n                    },\r\n                    \"server\"    : true\r\n    },\r\n    /* "],[0,"функция, кот"]],"start1":122,"start2":122,"length1":24,"length2":480},{"diffs":[[0,"',\r\n"],[-1,"    /* name of direcotory with libs */\r\n"],[0,"    "]],"start1":1676,"start2":1676,"length1":48,"length2":8},{"diffs":[[0,"b/server',\r\n"],[1,"    CSSDIR          :'./css',\r\n    \r\n"],[0,"    Port    "]],"start1":1737,"start2":1737,"length1":24,"length2":61},{"diffs":[[0,"={\r\n"],[-1,"    _allowed            :true, "],[0,"    "]],"start1":2152,"start2":2152,"length1":39,"length2":8},{"diffs":[[0,"с кэшем */\r\n"],[1,"    _allowed            :true,\r\n"],[0,"    /* данны"]],"start1":2206,"start2":2206,"length1":24,"length2":56},{"diffs":[[0,"    var "],[1,"lMinify;\r\n                try{\r\n                    "],[0,"lMinify "]],"start1":4573,"start2":4573,"length1":16,"length2":68},{"diffs":[[0,");\r\n"],[-1,"\r\n                this.done.js=this._allowed.js?lMinify.jsScripts():false;\r\n                this.done.html=this._allowed.html?lMinify.html():false;\r\n                this.done.css=this._allowed.css?lMinify.cssStyles(this._allowed.img):fals"],[1,"                }catch(pError){\r\n                    try{\r\n                        lMinify      = require('minify');\r\n                    }catch(pError){\r\n                        return console.log('Could not minify withou minify module\\n'    +\r\n                        'for fixing type:\\n'                                +\r\n                        'git submodule init\\n'                              +\r\n                        'git submodule update\\n'                            +\r\n                        'or\\n'                                              +\r\n                        'npm i minify');\r\n                    }\r\n                }\r\n                /*\r\n                 * temporary changed dir path,\r\n                 * becouse directory lib is write\r\n                 * protected by others by default\r\n                 * so if node process is started\r\n                 * from other user (root for example\r\n                 * in nodester) we can not write\r\n                 * minified versions\r\n                 */\r\n                this.MinFolder = '/' + lMinify.MinFolder;\r\n                var lMinFolder=this.MinFolder;\r\n                \r\n                /* post processing function for file\r\n                 * client.js\r\n                 */\r\n                var lPostProcessing_f = function(pFinalCode){\r\n                    console.log('file name of ' +\r\n                        'cloudfunc.js'          +\r\n                        ' in '                  +\r\n                        'client.js'             +\r\n                        ' changed. size:',\r\n                    (pFinalCode = pFinalCode\r\n                        .replace('cloudfunc.js','cloudfunc.min.js')\r\n                            .replace('keyBinding.js','keyBinding.min.js')\r\n                                .replace('/lib/', lMinFolder)\r\n                                    .replace('/lib/client/', lMinFolder)).length);\r\n                    return pFinalCode;\r\n                };\r\n                \r\n                this.done.js=this._allowed.js?\r\n                    lMinify.jsScripts([{\r\n                        'client.js': lPostProcessing_f},\r\n                        'lib/cloudfunc.js',\r\n                        'lib/client/keyBinding.js'],\r\n                        true)\r\n                :false;\r\n                                                                \r\n                this.done.html=this._allowed.html?\r\n                    lMinify.html(CloudServer.INDEX):false;\r\n                \r\n                this.done.css=this._allowed.css?\r\n                    lMinify.cssStyles([CloudServer.CSSDIR + '/style.css',\r\n                        CloudServer.CSSDIR + '/reset.css'],\r\n                        this._allowed.img):false;\r\n                        \r\n                this.Cache = lMinify.Cach"],[0,"e;\r\n"]],"start1":4690,"start2":4690,"length1":246,"length2":2796},{"diffs":[[0,"l:false}"],[1,",\r\n    \r\n    /* minification folder name */\r\n    MinFolder   :'',\r\n    Cache       :{}"],[0,"\r\n};\r\n\r\n"]],"start1":7593,"start2":7593,"length1":16,"length2":102},{"diffs":[[0,"    "],[-1,"var lConfig={\r\n            \"cache\" : {\"allowed\" : true},\r\n            \"minification\" : {\r\n                \"js\"    : false,"],[1,"try{\r\n        console.log('reading configureation file config.json...');\r\n        CloudServer.Config = require('./config');\r\n        console.log('config.json readed');\r\n        /* if command line parameter testing resolved \r\n         * setting config to testing, so server\r\n         * not created, just init and\r\n         * all logs writed to screen"],[0,"\r\n  "]],"start1":8844,"start2":8844,"length1":130,"length2":357},{"diffs":[[0,"    "],[1," */\r\n"],[0,"        "],[-1,"\"css\"   : false,\r\n                \"html\"  : true,\r\n                \"img\"   : "],[1,"if(process.argv[2]==='test'){            \r\n            CloudServer.Config.server=false;\r\n            CloudServer.Config.logs="],[0,"false"],[1,";"],[0,"\r\n  "]],"start1":9203,"start2":9203,"length1":98,"length2":152},{"diffs":[[0,"false;\r\n        "],[-1,"    "],[0,""],[1,""],[0,"}\r\n        };\r\n "]],"start1":9345,"start2":9345,"length1":36,"length2":32},{"diffs":[[0,"    "],[-1,"};\r\n    try{\r\n        console.log('reading configureation file config.json...');\r\n        lConfig=require('./config');\r\n        console.log('config.json readed');"],[1,"        \r\n        if(CloudServer.Config.logs){\r\n            console.log('log param setted up in config.json\\n' +\r\n                'from now all logs will be writed to log.txt');\r\n            CloudServer.writeLogsToFile();            \r\n        }"],[0,"\r\n  "]],"start1":9368,"start2":9368,"length1":170,"length2":252},{"diffs":[[0,"ringify("],[-1,"l"],[1,"CloudServer."],[0,"Config))"]],"start1":9820,"start2":9820,"length1":17,"length2":28},{"diffs":[[0,"ig));\r\n    }"],[1,"        "],[0,"\r\n    \r\n    "]],"start1":9844,"start2":9844,"length1":24,"length2":32},{"diffs":[[0,".setAllowed("],[-1,"l"],[1,"CloudServer."],[0,"Config.cache"]],"start1":9938,"start2":9938,"length1":25,"length2":36},{"diffs":[[0,"Allowed("],[-1,"l"],[1,"CloudServer."],[0,"Config.m"]],"start1":10091,"start2":10091,"length1":17,"length2":28},{"diffs":[[0,"er.IP;\r\n    "],[1,"\r\n"],[0,"    "],[-1,"\r\n"],[1,"/* if Cloud Server started on jitsu */\r\n    if(!process.env.HOME.indexOf('/opt/haibu')){\r\n        CloudServer.Port = '0.0.0.0';\r\n    }\r\n        \r\n    /* server mode or testing mode */    \r\n    if(!process.argv[2] && CloudServer.Config.server){\r\n    "],[0,"    var http"]],"start1":10939,"start2":10939,"length1":30,"length2":279},{"diffs":[[0,"'http');"],[1,"\r\n    "],[0,"    \r\n"],[1,"        try{\r\n        "],[0,"    http"]],"start1":11229,"start2":11229,"length1":22,"length2":50},{"diffs":[[0,"isten(\r\n"],[1,"        "],[0,"        "]],"start1":11319,"start2":11319,"length1":16,"length2":24},{"diffs":[[0,".Port,\r\n        "],[1,"      "],[1,"  "],[0,"CloudServer.IP);"]],"start1":11354,"start2":11354,"length1":32,"length2":40},{"diffs":[[0,");\r\n        "],[-1,"\r\n"],[1,"        \r\n        "],[0,"    console."]],"start1":11392,"start2":11392,"length1":26,"length2":42},{"diffs":[[0,"http://' +\r\n"],[1,"        "],[0,"        Clou"]],"start1":11473,"start2":11473,"length1":24,"length2":32},{"diffs":[[0,"erver.IP +\r\n"],[1,"        "],[0,"        ':' "]],"start1":11507,"start2":11507,"length1":24,"length2":32},{"diffs":[[0,"    ':' + \r\n"],[1,"        "],[0,"        Clou"]],"start1":11531,"start2":11531,"length1":24,"length2":32},{"diffs":[[0,"ver.Port);\r\n"],[1,"        }catch(pError){\r\n            console.log('Cloud Commander server could not started');\r\n            console.log(pError);\r\n        }\r\n    }else{\r\n        console.log('Cloud Commander testing mode');\r\n    }\r\n"],[0,"    /*\r\n    "]],"start1":11567,"start2":11567,"length1":24,"length2":237},{"diffs":[[0,"*/\r\n"],[-1,"            //lName=Path.basename(pathname);\r\n"],[0,"    "]],"start1":15125,"start2":15125,"length1":54,"length2":8},{"diffs":[[0,");\r\n"],[-1,"\r\n            var lReadFileFunc_f=CloudServer.getReadFileFunc(lName);\r\n            /* если там что-то есть передаём данные в функцию\r\n             * readFile\r\n             */\r\n            if(lFileData){"],[1,"            console.log(Path.basename(lName));\r\n                        \r\n            var lMinify=CloudServer.Minify;\r\n            \r\n            /* object thet contains information\r\n             * about the source of file data\r\n             */\r\n            var lFromCache_o={'cache': true};\r\n            \r\n            /* if cache is empty and Cache allowed and Minify_allowed \r\n             * and in Minifys cache is files, so save it to\r\n             * CloudServer cache\r\n             */\r\n            if(!lFileData &&  \r\n                lMinify._allowed){\r\n                    console.log('trying to read data from Minify.Cache');\r\n                    lFromCache_o.cache=false;\r\n                    lFileData = CloudServer.Minify.Cache[\r\n                        Path.basename(lName)];                    \r\n            }\r\n            var lReadFileFunc_f=CloudServer.getReadFileFunc(lName);\r\n            /* если там что-то есть передаём данные в функцию\r\n             * readFile\r\n             */\r\n            if(lFileData){                \r\n                /* if file readed not from cache - he readed from minified cache */\r\n                if(lFromCache_o.cache===false)\r\n                    lFromCache_o.minify=true;\r\n                else\r\n                    lFromCache_o.minify=false;\r\n                    "],[0,"\r\n  "]],"start1":15646,"start2":15646,"length1":210,"length2":1318},{"diffs":[[0,"console.log("],[-1,"'"],[1,"lName + ' "],[0,"readed from "]],"start1":16978,"start2":16978,"length1":25,"length2":34},{"diffs":[[0,"ileData,"],[-1,"true"],[1,"lFromCache_o"],[0,");\r\n    "]],"start1":17227,"start2":17227,"length1":20,"length2":28},{"diffs":[[0,"tml?"],[-1,"'index.min.html'"],[1,"\r\n                    '.' + CloudServer.Minify.MinFolder + 'index.min.html'\r\n                    "],[0,":Clo"]],"start1":19661,"start2":19661,"length1":24,"length2":105},{"diffs":[[0,"r.INDEX]=pRes;\r\n"],[1,"                \r\n"],[0,"                "]],"start1":19936,"start2":19936,"length1":32,"length2":50},{"diffs":[[0,"ctory())"],[-1,"                    "],[0,"\r\n      "]],"start1":20001,"start2":20001,"length1":36,"length2":16},{"diffs":[[0,"    */\r\n"],[-1,"\r\n"],[0,"        "]],"start1":23855,"start2":23855,"length1":18,"length2":16},{"diffs":[[0,"le.css',"],[1,"CloudServer.Minify.MinFolder + "],[0,"'all.min"]],"start1":24046,"start2":24046,"length1":16,"length2":47},{"diffs":[[0,"js',"],[-1,"'client.min.js')"],[1,"\r\n                    CloudServer.Minify.MinFolder + \r\n                        'client.min.js')\r\n                    "],[0,":lIn"]],"start1":24230,"start2":24230,"length1":24,"length2":125},{"diffs":[[0,"pError  "],[1,"        "],[0,"- ошибка"]],"start1":25957,"start2":25957,"length1":16,"length2":24},{"diffs":[[0,"pData   "],[1,"        "],[0,"- данные"]],"start1":25987,"start2":25987,"length1":16,"length2":24},{"diffs":[[0,"* @pFrom"],[-1,"File"],[1,"Cache_o   "],[0," - прочи"]],"start1":26014,"start2":26014,"length1":20,"length2":26},{"diffs":[[0,"айла"],[-1," bool"],[1,",\r\n *                      или из одного из кешей\r\n * Пример {cache: false, minify: true}"],[0,"\r\n *"]],"start1":26048,"start2":26048,"length1":13,"length2":97},{"diffs":[[0,"(pError,"],[1," "],[0,"pData,"],[1," "],[0,"pFromCac"]],"start1":26178,"start2":26178,"length1":22,"length2":24},{"diffs":[[0,"ata, pFromCache_"],[-1,"b"],[1,"o"],[0,"){\r\n        if ("]],"start1":26189,"start2":26189,"length1":33,"length2":33},{"diffs":[[0,"     if("],[1,"pFromCache_o && "],[0,"!pFromCa"]],"start1":26445,"start2":26445,"length1":16,"length2":32},{"diffs":[[0,"omCache_"],[-1,"b"],[1,"o.cache"],[0," && Clou"]],"start1":26473,"start2":26473,"length1":17,"length2":23},{"diffs":[[0,"\n            if("],[1," "],[0,"CloudServer.Gzip"]],"start1":26975,"start2":26975,"length1":32,"length2":33},{"diffs":[[0,".Gzip &&"],[-1,"!"],[1," !("],[0,"pFromCac"]],"start1":27003,"start2":27003,"length1":17,"length2":19},{"diffs":[[0,"omCache_"],[-1,"b"],[1,"o && pFromCache_o.cache) "],[0,"){\r\n    "]],"start1":27017,"start2":27017,"length1":17,"length2":41},{"diffs":[[0,"sended');\r\n    }"],[-1,""],[0,""],[1,"\r\n};\r\n\r\n/* function sets stdout to file log.txt */\r\nCloudServer.writeLogsToFile = function(){\r\n    var stdo = require('fs').createWriteStream('./log.txt');\r\n    \r\n    process.stdout.write = (function(write) {\r\n            return function(string, encoding, fd) {\r\n                    stdo.write(string);\r\n            };\r\n    })(process.stdout.write);"],[0,"\r\n};\r\n\r\nCloudSer"]],"start1":29296,"start2":29296,"length1":32,"length2":381}]],"length":29689,"saved":false}
{"ts":1342076472599,"patch":[[{"diffs":[[0,"t minify"],[-1," "],[1,"'   +\r\n                            '"],[0,"withou m"]],"start1":4901,"start2":4901,"length1":17,"length2":52},{"diffs":[[0,"odule\\n'    "],[-1,"+\r\n"],[1,"        +\r\n    "],[0,"            "]],"start1":4960,"start2":4960,"length1":27,"length2":39},{"diffs":[[0,"                "],[-1,"    "],[1,"+\r\n"],[0,"            +\r\n "]],"start1":5031,"start2":5031,"length1":36,"length2":35},{"diffs":[[0,"    +\r\n         "],[-1,"   +\r\n"],[0,"                "]],"start1":5043,"start2":5043,"length1":38,"length2":32},{"diffs":[[0,"                "],[-1,"     "],[0,"'git submodule i"]],"start1":5062,"start2":5062,"length1":37,"length2":32},{"diffs":[[0,"        "],[-1,"          "],[-1,"  "],[1,"+\r\n"],[0,"    "],[-1,"+\r\n"],[0,"        "]],"start1":5106,"start2":5106,"length1":35,"length2":23},{"diffs":[[0,"e\\n'            "],[-1," "],[1,"+\r\n"],[0,"               +"]],"start1":5165,"start2":5165,"length1":33,"length2":35},{"diffs":[[0,"\n               "],[-1,"+\r\n"],[0,"                "]],"start1":5183,"start2":5183,"length1":35,"length2":32},{"diffs":[[0,"        "],[-1,"           "],[0,"'or\\n'  "]],"start1":5204,"start2":5204,"length1":27,"length2":16},{"diffs":[[0,"        "],[1,"+\r\n"],[0,"    "],[-1,"            +\r\n"],[0,"        "]],"start1":5240,"start2":5240,"length1":35,"length2":23}]],"length":29688,"saved":false}
{"ts":1342076507607,"patch":[[{"diffs":[[0,"lient/',"],[1,"\r\n                                       "],[0," lMinFol"]],"start1":6568,"start2":6568,"length1":16,"length2":57}]],"length":29729,"saved":false}
{"ts":1342076549849,"patch":[[{"diffs":[[0,"nd...\\n'"],[-1,"  "],[0," +\r\n"],[-1,"        "],[0,"        "]],"start1":9748,"start2":9748,"length1":30,"length2":20},{"diffs":[[0,"         +\r\n"],[-1,"        "],[0,"            "]],"start1":9811,"start2":9811,"length1":32,"length2":24}]],"length":29711,"saved":false}
{"ts":1342076566636,"patch":[[{"diffs":[[0,"ractices"],[1,"\r\n            "],[0,"/caching"]],"start1":13493,"start2":13493,"length1":16,"length2":30}]],"length":29725,"saved":false}
{"ts":1342076581525,"patch":[[{"diffs":[[0,"erver.Cache.get("],[1,"\r\n                "],[0,"CloudServer.Gzip"]],"start1":15628,"start2":15628,"length1":32,"length2":50}]],"length":29743,"saved":false}
{"ts":1342076591890,"patch":[[{"diffs":[[0,"cache - "],[1,"\r\n                 * "],[0,"he reade"]],"start1":16787,"start2":16787,"length1":16,"length2":37},{"diffs":[[0,"d cache "],[1,"\r\n                 "],[0,"*/\r\n    "]],"start1":16838,"start2":16838,"length1":16,"length2":35}]],"length":29783,"saved":false}
{"ts":1342076628105,"patch":[[{"diffs":[[0,"[i],"],[-1,"'size':'dir','uid':lStats.uid,'mode':lMode};"],[1,"\r\n                    'size':'dir',\r\n                    'uid':lStats.uid,\r\n                    'mode':lMode};\r\n                "],[0,"\r\n  "]],"start1":21935,"start2":21935,"length1":52,"length2":136},{"diffs":[[0,"[i],"],[-1,"'uid':lStats.uid,'size':lStats.size,'mode':lMode};"],[1,"\r\n                'uid':lStats.uid,\r\n                'size':lStats.size,\r\n                'mode':lMode};\r\n                "],[0,"\r\n  "]],"start1":22260,"start2":22260,"length1":58,"length2":130}]],"length":29939,"saved":false}
