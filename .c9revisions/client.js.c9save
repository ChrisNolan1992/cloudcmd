{"ts":1341071661173,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* Функция которая возвратит обьект CloudCommander\r\n * @window - обьект window\r\n * @document - обьект document\r\n * @CloudFunc - обьект содержащий общий функционал\r\n *              клиентский и серверный\r\n */\r\n//var CloudCommander=(function(window,document){\r\n\r\n//var document,window;\r\n\r\nvar CloudCommander=(function(){\r\n\"use strict\";\r\n\r\n/* если функции console.log нет - создаём заглушку */\r\n\r\n/*\r\nvar console;\r\nif(!window)window={console:{log:function(pParam){return pParam;}}};\r\nelse if(window && !window.console){\r\n    console={\r\n        'log':function(param){\r\n            return param;\r\n        }\r\n    };\r\n}else console=window.console;\r\n*/\r\n/*\r\n    window.jQuery || document.write('<script src=\"jquery.min.js\"><\\/script>');\r\n*/\r\n\r\n/* Клиентский обьект, содержащий функциональную часть*/\r\nvar CloudClient={        \r\n    /* Конструктор CloudClient, который\r\n    * выполняет весь функционал по\r\n    * инициализации\r\n    */\r\n    init                    :function(){},\r\n    \r\n    keyBinding              :function(){},/* функция нажатий обработки клавишь */\r\n    keyBinded               :false,/* оброботка нажатий клавишь установлена*/\r\n    _loadDir                 :function(){},\r\n    /* \r\n     * Функция привязываеться ко всем ссылкам и\r\n     *  загружает содержимое каталогов\r\n     */\r\n     /* Обьект для работы с кэшем */\r\n     Cashe                  :{},\r\n     \r\n     /* ПРИВАТНЫЕ ФУНКЦИИ */\r\n     /* функция загружает json-данные о файловой системе */\r\n     _ajaxLoad              :function(){},\r\n     /* Функция генерирует JSON из html-таблицы файлов */\r\n     _getJSONfromFileTable  :function(){},\r\n     /* функция меняет ссыки на ajax-овые */\r\n     _changeLinks           :function(){},     \r\n     /* ОБЬЕКТЫ */\r\n     /* обьект, который содержит функции для отображения картинок*/\r\n     _images                :{},     \r\n     /* КОНСТАНТЫ*/\r\n     /* название css-класа текущего файла*/\r\n     CURRENT_FILE           :'current-file',\r\n     LIBDIR                 :'/lib',\r\n     LIBDIRCLIENT           :'/lib/client'\r\n};\r\n\r\n/* \r\n * Обьект для работы с кэшем\r\n * в него будут включены функции для\r\n * работы с LocalStorage, webdb,\r\n * idexed db etc.\r\n */\r\nCloudClient.Cache={\r\n    _allowed     :true,     /* приватный переключатель возможности работы с кэшем */\r\n     /* функция проверяет возможно ли работать с кэшем каким-либо образом */\r\n    isAllowed   :function(){},\r\n    /* Тип кэша, который доступен*/\r\n    type        :{},\r\n    /* Функция устанавливает кэш, если выбранный вид поддерживаеться браузером*/\r\n    set         :function(){},\r\n    /* Функция достаёт кэш, если выбранный вид поддерживаеться браузером*/\r\n    get         :function(){},\r\n    /* функция чистит весь кэш для всех каталогов*/\r\n    clear       :function(){}\r\n};\r\n\r\n/* Обьект, который содержит\r\n * функции для отображения\r\n * картинок\r\n */\r\nCloudClient._images={\r\n    /* Функция создаёт картинку загрузки*/\r\n    loading     :function(){   \r\n        var e=document.createElement('span');\r\n    e.className='icon loading';\r\n    e.id='loading-image';\r\n    return e;\r\n},\r\n\r\n    /* Функция создаёт картинку ошибки загрузки*/\r\n    error       :function(){\r\n        var e=document.createElement('span');    \r\n        e.className='icon error';\r\n        e.id='error-image';\r\n        return e;\r\n    }\r\n};\r\n\r\n/* функция проверяет поддерживаеться ли localStorage */\r\nCloudClient.Cache.isAllowed=(function(){\r\n    if(window.localStorage && \r\n        localStorage.setItem &&\r\n        localStorage.getItem){\r\n        CloudClient.Cache._allowed=true;\r\n    }else\r\n        {\r\n            CloudClient.Cache._allowed=false;\r\n            /* загружаем PolyFill для localStorage,\r\n             * если он не поддерживаеться браузером\r\n             * https://gist.github.com/350433 \r\n             */\r\n            /*\r\n            CloudClient.jsload('https://raw.github.com/gist/350433/c9d3834ace63e5f5d7c8e1f6e3e2874d477cb9c1/gistfile1.js',\r\n                function(){CloudClient.Cache._allowed=true;\r\n            });\r\n            */\r\n        }\r\n});\r\n /* если доступен localStorage и\r\n  * в нём есть нужная нам директория -\r\n  * записываем данные в него\r\n  */\r\nCloudClient.Cache.set=(function(pName, pData){\r\n    if(CloudClient.Cache._allowed && pName && pData){\r\n        localStorage.setItem(pName,pData);\r\n    }\r\n});\r\n/* Если доступен Cache принимаем из него данные*/\r\nCloudClient.Cache.get=(function(pName){\r\n    if(CloudClient.Cache._allowed  && pName){\r\n        return localStorage.getItem(pName);\r\n    }\r\n    else return null;\r\n});\r\n/* Функция очищает кэш*/\r\nCloudClient.Cache.clear=(function(){\r\n    if(CloudClient.Cache._allowed){\r\n        localStorage.clear();\r\n    }\r\n});\r\n\r\n\r\n/* функция обработки нажатий клавишь */\r\nCloudClient.keyBinding=(function(){\r\n    /* loading keyBinding module and start it */\r\n    CloudClient.jsload(CloudClient.LIBDIRCLIENT+'/keyBinding.js',function(){\r\n        CloudCommander.keyBinding();\r\n    });\r\n});\r\n\r\n\r\n/* \r\n * Функция привязываеться ко всем ссылкам и\r\n *  загружает содержимое каталогов\r\n */\r\nCloudClient._loadDir=(function(pLink,pNeedRefresh){\r\n    /* @pElem - элемент, \r\n     * для которого нужно\r\n     * выполнить загрузку\r\n     */\r\n        return function(){\r\n            /* показываем гиф загрузки возле пути папки сверху*/\r\n            LoadingImage.className='icon loading';/* показываем загрузку*/\r\n            ErrorImage.className='icon error hidden';/* прячем ошибку */\r\n            /* если элемент задан -\r\n             * работаем с ним\r\n             */\r\n             /* если мы попали сюда с таблицы файлов*/\r\n            try{\r\n                this.firstChild.nextSibling.appendChild(LoadingImage);\r\n            }catch(error){\r\n                /* если <ctrl>+<r>\r\n                 * кнопка обновления\r\n                 */\r\n                try{this.firstChild.parentElement.appendChild(LoadingImage);}\r\n                catch(error){console.log(error);}\r\n                }\r\n            \r\n            var lCurrentFile=document.getElementsByClassName(CloudClient.CURRENT_FILE);\r\n            /* получаем имя каталога в котором находимся*/ \r\n            var lHref;\r\n            try{\r\n                lHref=lCurrentFile[0].parentElement.getElementsByClassName('path')[0].innerText;\r\n            }catch(error){console.log('error');}\r\n            \r\n            lHref=CloudFunc.removeLastSlash(lHref);\r\n            var lSubstr=lHref.substr(lHref,lHref.lastIndexOf('/'));\r\n            lHref=lHref.replace(lSubstr+'/','');\r\n                                     \r\n            /* загружаем содержимое каталога*/\r\n            CloudClient._ajaxLoad(pLink, pNeedRefresh);\r\n            \r\n            /* получаем все элементы выделенной папки*/\r\n            /* при этом, если мы нажали обновить\r\n             * или <Ctrl>+R - ссылок мы ненайдём\r\n             * и заходить не будем\r\n             */\r\n            var lA=this.getElementsByTagName('a');\r\n            /* если нажали на ссылку на верхний каталог*/\r\n            if(lA.length>0 && lA[0].innerText==='..' &&\r\n                lHref!=='/'){\r\n            /* функция устанавливает курсор на каталог\r\n            * с которого мы пришли, если мы поднялись\r\n            * в верх по файловой структуре\r\n            */              \r\n                CloudClient._currentToParent(lHref);\r\n            }\r\n            \r\n            /* что бы не переходить по ссылкам\r\n             * а грузить всё ajax'ом,\r\n             * возвращаем false на событие\r\n             * onclick\r\n             */                         \r\n            return false;\r\n            };\r\n    });\r\n    \r\n/* Функция устанавливает текущим файлом, тот\r\n * на который кликнули единожды\r\n */\r\nCloudClient._setCurrent=(function(){\r\n        /*\r\n         * @pFromEnter - если мы сюда попали \r\n         * из события нажатия на энтер - \r\n         * вызоветься _loadDir\r\n         */\r\n        return function(pFromEnter){\r\n            var lCurrentFile=document.getElementsByClassName(CloudClient.CURRENT_FILE);\r\n            if(lCurrentFile && lCurrentFile.length > 0){\r\n                /* если мы находимся не на \r\n                 * пути и не на заголовках\r\n                 */\r\n                if(this.className!=='path' && \r\n                    this.className!=='fm_header'){\r\n                        \r\n                    lCurrentFile[0].className='';\r\n                    /* устанавливаем курсор на файл,\r\n                    * на который нажали */\r\n                    this.className=CloudClient.CURRENT_FILE;\r\n                }\r\n            }\r\n             /* если мы попали сюда с энтера*/\r\n             if(pFromEnter===true){\r\n                this.ondblclick(this);               \r\n             }/* если мы попали сюда от клика мышки */\r\n             else{pFromEnter.returnValue=false;}\r\n                                       \r\n            /* что бы не переходить по ссылкам\r\n             * а грузить всё ajax'ом,\r\n             * возвращаем false на событие\r\n             * onclick\r\n             */\r\n            return false;\r\n        };\r\n    });\r\n    \r\n/* функция устанавливает курсор на каталог\r\n * с которого мы пришли, если мы поднялись\r\n * в верх по файловой структуре\r\n * @pDirName - имя каталога с которого мы пришли\r\n */\r\nCloudClient._currentToParent = (function(pDirName){                                              \r\n    /* опредиляем в какой мы панели:\r\n    * правой или левой\r\n    */\r\n    var lCurrentFile=document.getElementsByClassName(CloudClient.CURRENT_FILE);\r\n    var lPanel;\r\n    try{\r\n        lPanel=lCurrentFile[0].parentElement.id;\r\n    }catch(error){console.log(\"Current file not found\\n\"+error);}\r\n    /* убираем слэш с имени каталога*/\r\n    pDirName=pDirName.replace('/','');\r\n    /* ищем файл с таким именем*/\r\n    lPanel=document.getElementById(lPanel);\r\n    if(!lPanel)return;\r\n    \r\n    var lLi=lPanel.getElementsByTagName('li');\r\n    for(var i=0;i<lLi.length;i++){\r\n        var lA=lLi[i].getElementsByTagName('a');\r\n        if(lA.length && lA[0].innerText===pDirName){\r\n            /* если уже выделен какой-то файл, снимаем\r\n             * выделение\r\n             */\r\n            lCurrentFile=lPanel.getElementsByClassName(CloudClient.CURRENT_FILE);\r\n            if(lCurrentFile.length>0)lCurrentFile[0].className='';\r\n            \r\n            lLi[i].className=CloudClient.CURRENT_FILE;\r\n        }\r\n    }\r\n}); \r\n  \r\n/* глобальные переменные */\r\nvar LoadingImage;\r\nvar ErrorImage;\r\n\r\nvar $;\r\nvar CloudFunc;\r\n/* Конструктор CloudClient, который\r\n * выполняет весь функционал по\r\n * инициализации\r\n */\r\nCloudClient.init=(function()\r\n{    \r\n    /* меняем title \r\n     * если js включен - имена папок отображать необязательно...\r\n     * а может и обязательно при переходе, можно будет это сделать\r\n     */\r\n    var lTitle=document.getElementsByTagName('title');\r\n    if(lTitle.length>0)lTitle[0].innerText='Cloud Commander';\r\n    \r\n    /* загружаем jquery: */\r\n    CloudClient.jsload('//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js',function(){\r\n        /* сохраняем переменную jQuery себе в область видимости */\r\n        $=window.jQuery;\r\n        if(!window.jQuery)CloudClient.jsload('jquery.min.js',\r\n            function(){\r\n               $=window.jQuery;\r\n            });\r\n    });\r\n    \r\n        /* загружаем общие функции для клиента и сервера*/\r\n        CloudClient.jsload(CloudClient.LIBDIR+'/cloudfunc.js',function(){\r\n        /* берём из обьекта window общий с сервером функционал */\r\n        CloudFunc=window.CloudFunc;\r\n            \r\n        /* меняем ссылки на ajax'овые*/\r\n        CloudClient._changeLinks(CloudFunc.LEFTPANEL);\r\n        CloudClient._changeLinks(CloudFunc.RIGHTPANEL);\r\n                \r\n        /* устанавливаем переменную доступности кэша*/\r\n        CloudClient.Cache.isAllowed();    \r\n        /* Устанавливаем кэш корневого каталога */    \r\n        if(!CloudClient.Cache.get('/'))CloudClient.Cache.set('/',CloudClient._getJSONfromFileTable());  \r\n        }\r\n    );                \r\n    \r\n    LoadingImage=CloudClient._images.loading();\r\n    /* загружаем иконку загрузки возле кнопки обновления дерева каталогов*/        \r\n    try{\r\n        document.getElementsByClassName('path')[0].getElementsByTagName('a')[0].appendChild(LoadingImage);\r\n        LoadingImage.className+=' hidden'; /* прячем её */\r\n    }catch(error){console.log(error);}\r\n    ErrorImage=CloudClient._images.error();      \r\n    \r\n    /* устанавливаем размер высоты таблицы файлов\r\n     * исходя из размеров разрешения экрана\r\n     */ \r\n     \r\n    /* формируем и округляем высоту экрана\r\n     * при разрешениии 1024x1280:\r\n     * 658 -> 700\r\n     */                            \r\n    \r\n    var lHeight=window.screen.height - (window.screen.height/3).toFixed();\r\n    lHeight=(lHeight/100).toFixed()*100;\r\n     \r\n    var lFm=document.getElementById('fm');\r\n    if(lFm)lFm.style.cssText='height:' +\r\n        lHeight +\r\n        'px';        \r\n        \r\n    /* выделяем строку с первым файлом */\r\n    var lFmHeader=document.getElementsByClassName('fm_header');\r\n    if(lFmHeader && lFmHeader[0].nextSibling)\r\n        lFmHeader[0].nextSibling.className=CloudClient.CURRENT_FILE;\r\n    \r\n    /* показываем элементы, которые будут работать только, если есть js */\r\n    var lFM=document.getElementById('fm');\r\n    if(lFM)lFm.className='localstorage';\r\n    \r\n    /* если есть js - показываем правую панель*/\r\n    var lRight=document.getElementById('right');\r\n    if(lRight)lRight.className=lRight.className.replace('hidden','');\r\n    \r\n    CloudClient.cssSet({id:'show_2panels',\r\n        element:document.head,\r\n        inner:'#left{width:45%;}'\r\n    });        \r\n});\r\n\r\n/* функция меняет ссыки на ajax-овые */\r\nCloudClient._changeLinks = function(pPanelID)\r\n{\r\n    /* назначаем кнопку очистить кэш и показываем её*/\r\n    var lClearcache=document.getElementById('clear-cache');\r\n    if(lClearcache)lClearcache.onclick=CloudClient.Cache.clear;    \r\n    \r\n    /* меняем ссылки на ajax-запросы */\r\n    var lPanel=document.getElementById(pPanelID);\r\n    var a=lPanel.getElementsByTagName('a');\r\n    \r\n      /* Если нажмут на кнопку перезагрузить страниц - её нужно будет обязательно\r\n     * перезагрузить\r\n     */\r\n    /* номер ссылки очистки кэша*/\r\n    //var lCLEARICON=0;\r\n    /* номер ссылки иконки обновления страницы */\r\n    var lREFRESHICON=0;\r\n        \r\n     /* путь в ссылке, который говорит\r\n      * что js отключен\r\n      */\r\n    var lNoJS_s = CloudFunc.NOJS; \r\n    var lFS_s   = CloudFunc.FS;\r\n    \r\n    for(var i=0;i<a.length;i++)\r\n    {\r\n        //if(i===2){/*ставим рамку на первый с верху файл*/\r\n        //       a[i].parentElement.parentElement.className='current-file';\r\n        //    }\r\n        /* если ссылка на папку, а не файл */\r\n        if(a[i].target!=='_blank')\r\n        {\r\n            /* убираем адрес хоста*/\r\n                var link='/'+a[i].href.replace(document.location.href,'');\r\n            /* убираем значения, которые говорят,\r\n             * об отсутствии js\r\n             */\r\n         \r\n            if(link.indexOf(lNoJS_s)===lFS_s.length){\r\n                link=link.replace(lNoJS_s,'');\r\n            }            \r\n            /* ставим загрузку гифа на клик*/\r\n            if(i===lREFRESHICON)\r\n                a[i].onclick=CloudClient._loadDir(link,true);\r\n            /* если мы попали на кнопку обновления структуры каталогов */\r\n            /*\r\n                if(a[i].className && a[i].className===CloudFunc.REFRESHICON)\r\n            */\r\n            /* устанавливаем обработчики на строку на одинарное и\r\n             * двойное нажатие на левую кнопку мышки\r\n             */\r\n            else{\r\n                try{\r\n                    a[i].parentElement.parentElement.onclick=CloudClient._setCurrent();\r\n                    a[i].parentElement.parentElement.ondblclick=CloudClient._loadDir(link);\r\n                }catch(error){console.log(error);}\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/*\r\n * Функция загружает json-данные о Файловой Системе\r\n * через ajax-запрос.\r\n * @path - каталог для чтения\r\n * @pNeedRefresh - необходимость обновить данные о каталоге\r\n */\r\nCloudClient._ajaxLoad=function(path, pNeedRefresh)\r\n{                           \r\n        /* Отображаем красивые пути */        \r\n        var lPath=path;\r\n        var lFS_s=CloudFunc.FS;\r\n        if(lPath.indexOf(lFS_s)===0){\r\n            lPath=lPath.replace(lFS_s,'');\r\n            if(lPath==='')lPath='/';\r\n        }\r\n        console.log ('reading dir: \"'+lPath+'\";');\r\n        \r\n         /* если доступен localStorage и\r\n         * в нём есть нужная нам директория -\r\n         * читаем данные с него и\r\n         * выходим\r\n         * если стоит поле обязательной перезагрузки - \r\n         * перезагружаемся\r\n         */\r\n         \r\n         /* опредиляем в какой мы панели:\r\n          * правой или левой\r\n          */\r\n         var lPanel;\r\n         try{\r\n            lPanel=document.getElementsByClassName(CloudClient.CURRENT_FILE)[0].parentElement.id;\r\n         }catch(error){console.log(\"Current file not found\\n\"+error);}\r\n         \r\n        if(pNeedRefresh===undefined && lPanel){\r\n            var lJSON=CloudClient.Cache.get(lPath);\r\n            if (lJSON!==null){\r\n                /* переводим из текста в JSON */\r\n                if(window && !window.JSON){\r\n                    try{\r\n                        lJSON=eval('('+lJSON+')');\r\n                    }catch(err){\r\n                        console.log(err);\r\n                    }\r\n                }else lJSON=JSON.parse(lJSON);\r\n                CloudClient._createFileTable(lPanel,lJSON);\r\n                CloudClient._changeLinks(lPanel);\r\n                return;\r\n            }\r\n        }\r\n        \r\n        /* ######################## */\r\n        try{\r\n            $.ajax({\r\n                url: path,\r\n                error: function(jqXHR, textStatus, errorThrown){\r\n                    console.log(textStatus+' : '+errorThrown);\r\n                    var lLoading=document.getElementById('loading-image');\r\n                    ErrorImage.className='icon error';\r\n                    ErrorImage.title=errorThrown;\r\n                    lLoading.parentElement.appendChild(ErrorImage);\r\n                    lLoading.className='hidden';\r\n                    //document.getElementsByClassName('path')[0].appendChild(ErrorImage);\r\n                                        \r\n                },\r\n                success:function(data, textStatus, jqXHR){                                            \r\n                    /* если такой папки (или файла) нет\r\n                     * прячем загрузку и показываем ошибку\r\n                     */\r\n                    /* для совместимости с firefox меняем data\r\n                     * на jqXHR, он воспринимает data к Document\r\n                     * когда возвращаеться ошибка, о том, что\r\n                     * нет файла или нет доступа\r\n                     */\r\n                     \r\n                     var lLoading;\r\n                    if(!jqXHR.responseText.indexOf('Error:')){\r\n                        /* если файла не существует*/\r\n                        if(!jqXHR.responseText.indexOf('Error: ENOENT, ')){\r\n                            ErrorImage.title=jqXHR.responseText.replace('Error: ENOENT, n','N');\r\n                        }\r\n                        /* если не хватает прав для чтения файла*/\r\n                        else if(!jqXHR.responseText.indexOf('Error: EACCES,')){\r\n                            ErrorImage.title=jqXHR.responseText.replace('Error: EACCES, p','P');\r\n                        }\r\n                            ErrorImage.className='icon error';                                \r\n                            lLoading=document.getElementById('loading-image');\r\n                            lLoading.parentElement.appendChild(ErrorImage);\r\n                            lLoading.className='hidden';\r\n                            \r\n                            return;\r\n                    }                        \r\n                    CloudClient._createFileTable(lPanel,data);\r\n                    CloudClient._changeLinks(lPanel);\r\n                                                                \r\n                    /* Сохраняем структуру каталогов в localStorage,\r\n                     * если он поддерживаеться браузером\r\n                     */\r\n                    /* переводим таблицу файлов в строку, для\r\n                    * сохранения в localStorage\r\n                    */\r\n                    var lJSON_s=JSON.stringify(data);\r\n                    console.log(lJSON_s.length);\r\n                    \r\n                    /* если размер данных не очень бошьой\r\n                    * сохраняем их в кэше\r\n                    */\r\n                    if(lJSON_s.length<50000)\r\n                        CloudClient.Cache.set(lPath,lJSON_s);                        \r\n                }\r\n            });\r\n        }catch(err){console.log(err);}\r\n};\r\n\r\n/*\r\n * Функция строит файловую таблицу\r\n * @pEleme - родительский элемент\r\n * @pJSON  - данные о файлах\r\n */\r\nCloudClient._createFileTable = function(pElem,pJSON)\r\n{    \r\n    var lElem=document.getElementById(pElem);\r\n    /* говорим построителю,\r\n     * что бы он в нужный момент\r\n     * выделил строку с первым файлом\r\n     */\r\n    \r\n    /* очищаем панель */\r\n    var i = lElem.childNodes.length;\r\n    while(i--){\r\n        lElem.removeChild(lElem.lastChild);\r\n    }\r\n    \r\n    /* заполняем панель новыми элементами */    \r\n    lElem.innerHTML=CloudFunc.buildFromJSON(pJSON,true);\r\n};\r\n\r\n/* \r\n * Функция создаёт элемент и\r\n * загружает файл с src.\r\n * @pName       - название тэга\r\n * @pSrc        - путь к файлу\r\n * @pFunc       - функци\r\n * @pStyle      - стиль\r\n * @pId         - id\r\n * @pElement    - элемент, дочерним которо будет этот\r\n */\r\nCloudClient._anyload = function(pName,pSrc,pFunc,pStyle,pId,pElement)\r\n{     \r\n    //если скрипт еще не загружен\r\n    /* убираем путь к файлу, оставляя только название файла */\r\n    var lID;\r\n    if(pId===undefined){\r\n        lID=pSrc.replace(pSrc.substr(pSrc,pSrc.lastIndexOf('/')+1),'');\r\n        /* убираем точку*/\r\n        lID=lID.replace('.','_');\r\n    }else lID=pId;\r\n    if(!document.getElementById(lID))\r\n    {\r\n        var element = document.createElement(pName);\r\n        element.src = pSrc;\r\n        element.id=lID;\r\n        if(arguments.length>=3){\r\n            element.onload=pFunc;\r\n            if(arguments.length>=4){\r\n                element.style.cssText=pStyle;\r\n            }\r\n        }        \r\n        //document.body\r\n        pElement.appendChild(element);    \r\n        return element;//'elem '+src+' loaded';\r\n    }\r\n    /* если js-файл уже загружен \r\n     * запускаем функцию onload\r\n     */\r\n    else if(pFunc){\r\n        try{\r\n            pFunc();\r\n        }catch(error){console.log(error);}\r\n    }\r\n};\r\n\r\n/* Функция загружает js-файл */\r\nCloudClient.jsload = function(pSrc,pFunc,pStyle,pId)\r\n{\r\n    CloudClient._anyload('script',pSrc,pFunc,pStyle,pId,document.body);\r\n};\r\n/* Функция создаёт елемент style и записывает туда стили \r\n * @pParams_o - структура параметров, заполняеться таким\r\n * образом: {src: ' ',func: '', id: '', element: '', inner: ''}\r\n * все параметры опциональны\r\n */\r\nCloudClient.cssSet = function(pParams_o){\r\n    var lElem=CloudClient._anyload('style',\r\n        pParams_o.src,\r\n        pParams_o.func,\r\n        pParams_o.style,\r\n        pParams_o.id,\r\n        pParams_o.element?pParams_o.element:document.body);\r\n    lElem.innerText=pParams_o.inner;\r\n};\r\n\r\n/* \r\n * Функция генерирует JSON из html-таблицы файлов \r\n */\r\n/* \r\n * Используеться при первом заходе в корень\r\n */\r\nCloudClient._getJSONfromFileTable=function()\r\n{\r\n    var lLeft=document.getElementById('left');\r\n    \r\n    \r\n    //var lPath=document.getElementById('path').innerText;\r\n    var lPath=document.getElementsByClassName('path')[0].innerText;\r\n    var lFileTable=[{path:lPath,size:'dir'}];\r\n    var lLI=lLeft.getElementsByTagName('li');\r\n    \r\n    var j=1;/* счётчик реальных файлов */\r\n    var i=1;/* счётчик элементов файлов в DOM */\r\n    /* Если путь отличный от корневного\r\n     * второй элемент li - это ссылка на верхний\r\n     * каталог '..'\r\n     */\r\n    i=2;/* пропускам Path и Header*/\r\n\r\n    \r\n    for(;i<lLI.length;i++)\r\n    {\r\n        var lIsDir=lLI[i].getElementsByClassName('mini-icon')[0]\r\n        .className.replace('mini-icon ','')==='directory'?true:false;\r\n        \r\n        var lName=lLI[i].getElementsByClassName('name')[0].innerText;\r\n        /* если это папка - выводим слово dir вместо размера*/\r\n        var lSize=lIsDir?'dir':lLI[i].getElementsByClassName('size')[0].innerText;\r\n        var lMode=lLI[i].getElementsByClassName('mode')[0].innerText;\r\n        /* переводим права доступа в цыфровой вид\r\n         * для хранения в localStorage\r\n         */\r\n        lMode=CloudFunc.convertPermissionsToNumberic(lMode);\r\n        \r\n        lFileTable[j++]={\r\n            name:lName,\r\n            size:lSize,\r\n            mode:lMode\r\n        };\r\n    }\r\n    return JSON.stringify(lFileTable);\r\n};\r\n\r\n\r\n   /* если нет функции поиска по класам,\r\n     * а её нет в IE,\r\n     * - используем jquery\r\n     * при необходимости\r\n     * можна заменить на любой другой код\r\n     */ \r\n if(!document.getElementsByClassName){\r\n     CloudClient.jsload('//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js',function(){\r\n        /* сохраняем переменную jQuery себе в область видимости */\r\n        document.getElementsByClassName=function(pClassName){\r\n            return $('.'+pClassName)[0];\r\n        };\r\n        $=window.jQuery;\r\n        if(!window.jQuery)CloudClient.jsload('jquery.min.js',\r\n            function(){\r\n               $=window.jQuery;\r\n               document.getElementsByClassName=function(pClassName){\r\n                    return $('.'+pClassName)[0];\r\n                };\r\n            });\r\n        });\r\n}\r\n\r\nreturn CloudClient;\r\n})();//(this,this.document);\r\ntry{\r\n    window.onload=function(){\r\n        'use strict';        \r\n        /* базовая инициализация*/\r\n        CloudCommander.init();\r\n        /* привязываем клавиши к функциям */\r\n        CloudCommander.keyBinding();\r\n    };\r\n}\r\ncatch(err){}"]],"start1":0,"start2":0,"length1":0,"length2":25939}]],"length":25939}
{"contributors":[],"silentsave":false,"ts":1341485429147,"patch":[[{"diffs":[[0,"*/\r\n"],[-1,"//var CloudCommander=(function(window,document){\r\n\r\n//var document,window;\r\n\r\nvar CloudCommander=(function(){\r\n\"use strict\";\r\n\r\n/* если функции console.log нет - создаём заглушку */\r\n\r\n/*\r\nvar console;\r\nif(!window)window={console:{log:function(pParam){return pParam;}}};\r\nelse if(window && !window.console){\r\n    console={\r\n        'log':function(param){\r\n            return param;\r\n        }\r\n    };\r\n}else console=window.console;\r\n*/\r\n/*\r\n    window.jQuery || document.write('<script src=\"jquery.min.js\"><\\/script>');\r\n*/"],[1,"\r\nvar CloudCommander=(function(){\r\n\"use strict\";"],[0,"\r\n\r\n"]],"start1":205,"start2":205,"length1":531,"length2":56},{"diffs":[[0,"('path')[0]."],[-1,"innerTex"],[1,"textConten"],[0,"t;\r\n        "]],"start1":5692,"start2":5692,"length1":32,"length2":34},{"diffs":[[0,">0 && lA[0]."],[-1,"innerTex"],[1,"textConten"],[0,"t==='..' &&\r"]],"start1":6457,"start2":6457,"length1":32,"length2":34},{"diffs":[[0,"& lA[0]."],[-1,"innerTex"],[1,"textConten"],[0,"t===pDir"]],"start1":9410,"start2":9410,"length1":24,"length2":26},{"diffs":[[0,"itle[0]."],[-1,"innerTex"],[1,"textConten"],[0,"t='Cloud"]],"start1":10259,"start2":10259,"length1":24,"length2":26},{"diffs":[[0,"{width:4"],[-1,"5"],[1,"6"],[0,"%;}'\r\n  "]],"start1":13004,"start2":13004,"length1":17,"length2":17},{"diffs":[[0,"em.inner"],[-1,"Text"],[1,"HTML"],[0,"=pParams"]],"start1":22793,"start2":22793,"length1":20,"length2":20},{"diffs":[[0,"t');"],[-1,"\r\n"],[0,"    \r\n"],[-1,"    \r\n    //var lPath=document.getElementById('path').innerText;\r\n"],[0,"    "]],"start1":23038,"start2":23038,"length1":82,"length2":14},{"diffs":[[0,"('path')[0]."],[-1,"innerTex"],[1,"textConten"],[0,"t;\r\n    var "]],"start1":23093,"start2":23093,"length1":32,"length2":34},{"diffs":[[0,"('name')[0]."],[-1,"innerTex"],[1,"textConten"],[0,"t;\r\n        "]],"start1":23708,"start2":23708,"length1":32,"length2":34},{"diffs":[[0,"('size')[0]."],[-1,"innerTex"],[1,"textConten"],[0,"t;\r\n        "]],"start1":23858,"start2":23858,"length1":32,"length2":34},{"diffs":[[0,"[0]."],[-1,"innerTex"],[1,"textConten"],[0,"t;\r\n"]],"start1":23939,"start2":23939,"length1":16,"length2":18}]],"length":25412,"saved":false}
