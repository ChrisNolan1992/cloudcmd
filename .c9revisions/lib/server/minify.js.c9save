{"ts":1341484847358,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* Модуль сжатия js-скриптов и css*/\r\n\r\n/* функция сжимает js-скрипты \r\n * и сохраняет их с именем .min.js\r\n */\r\n \r\nvar fs = require('fs');\r\nvar path=require('path');\r\n\r\n/* CONSTANTS */\r\n/* dir contains css-files */\r\nvar CSSDIR      = 'css/';    \r\n\r\n/* ---------------------------------- */\r\nconsole.log('minify.js loaded...');\r\nconsole.log('current dir: ' + process.cwd());\r\n/* ---------------------------------- */\r\n\r\nexports.jsScripts=function jsScripts(){\r\n    'use strict';    \r\n    \r\n    /* подключаем модуль uglify-js\r\n     * если его нет - дальнейшая \r\n     * работа функции не имеет смысла\r\n     */\r\n    try{\r\n        var jsp = require(\"uglify-js\").parser;\r\n        var pro = require(\"uglify-js\").uglify;\r\n    }catch(error){\r\n        console.log('can\\'n load uglify-js\\n'                  +\r\n            'to use js-minification you need to install uglify-js\\n'    +\r\n                'npm install uglify-js\\n'                               +\r\n                'https://github.com/mishoo/UglifyJS');\r\n        return false;\r\n    }\r\n    /* Константы */\r\n        \r\n    var CLIENT_JS='client.js';\r\n    var CLOUDFUNC_JS='/lib/cloudfunc.js';\r\n    var CLIENT_KEYBINDING_JS='lib/client/keyBinding.js';\r\n      \r\n    var dataReaded_f=function(pFileName, pData){\r\n            console.log('file ' + pFileName + ' readed');\r\n            \r\n            /*********************************/\r\n            /* сжимаем код через uglify-js */\r\n            var uglify_js=function(pDdata){\r\n                var orig_code = pDdata.toString();\r\n                var ast = jsp.parse(orig_code); // parse code and get the initial AST\r\n                ast = pro.ast_mangle(ast); // get a new AST with mangled names\r\n                ast = pro.ast_squeeze(ast); // get an AST with compression optimizations\r\n                var result_code = pro.gen_code(ast); // compressed code here\r\n                return result_code;\r\n            };\r\n            /*********************************/\r\n            var final_code=uglify_js(pData);\r\n            \r\n            var minFileName=pFileName.replace('.js','.min.js');\r\n            /* если мы сжимаем client.js -\r\n             * меняем строку cloudfunc.js на\r\n             * cloudfunc.min.js и выводим сообщение\r\n             *\r\n             * меняем строку keyBinding.js на\r\n             * keyBinding.min.js\r\n             * если другой файл - ничего не деалем\r\n             */\r\n            if(pFileName===CLIENT_JS)\r\n                console.log('file name of ' +\r\n                    CLOUDFUNC_JS            +\r\n                    ' in '                  +\r\n                    CLIENT_JS               +\r\n                    ' changed. size:',\r\n                    (final_code=final_code\r\n                        .replace('cloudfunc.js','cloudfunc.min.js')\r\n                            .replace('keyBinding.js','keyBinding.min.js')).length);\r\n            \r\n            /* записываем сжатый js-скрипт*/\r\n            fs.writeFile(path.basename(minFileName), final_code, fileWrited(minFileName));\r\n        };\r\n     console.log('reading file ' + CLIENT_JS+'...');\r\n    fs.readFile(CLIENT_JS,fileReaded(CLIENT_JS,dataReaded_f));\r\n    \r\n    console.log('reading file ' + CLOUDFUNC_JS+'...');\r\n    fs.readFile(CLOUDFUNC_JS,fileReaded(CLOUDFUNC_JS,dataReaded_f));    \r\n    \r\n    console.log('reading file ' + CLIENT_KEYBINDING_JS+'...');\r\n    fs.readFile(CLIENT_KEYBINDING_JS, fileReaded(CLIENT_KEYBINDING_JS,dataReaded_f));\r\n    \r\n    \r\n    return true;\r\n};\r\n\r\n/* функция сжимает css-стили \r\n * и сохраняет их с именем .min.css\r\n * @pImgConvertToBase64_b - булевый признак,\r\n * который отвечает за то, что быконвертировать\r\n * картинки в base64 и поместить в выходной css файл\r\n */\r\nexports.cssStyles=function cssStyles(pImgConvertToBase64_b){\r\n    'use strict';\r\n    \r\n     /* connecting cleanCSS,\r\n      * if we can't find it -\r\n      * return false\r\n      */\r\n     var cleanCSS;\r\n     try{\r\n        cleanCSS = require('clean-css');\r\n    }catch(error){\r\n        console.log('can\\'n load clean-css \\n'                          +\r\n            'to use css-minification you need to install clean-css \\n'  +\r\n                'npm install clean-css\\n'                               +\r\n                'https://github.com/GoalSmashers/clean-css');\r\n        return false;\r\n    }\r\n    \r\n    /* Константы */\r\n    var STYLE_CSS   = CSSDIR+'style.css';\r\n    var RESET_CSS   = CSSDIR+'reset.css';\r\n    \r\n    var lAllStyle='';\r\n    var lResetCssDone=false;\r\n    var lStyleCssDone=false;\r\n    var dataReaded_f=function(pFileName, pData){\r\n        console.log('file ' + pFileName + ' readed');                \r\n        /*********************************/\r\n        /* сжимаем код через clean-css */\r\n        var clean_css=function(pData){\r\n            /* Сохраняем весь стиль в одну переменную*/            \r\n            return cleanCSS.process(pData);\r\n        };\r\n        /*********************************/\r\n        var final_code=clean_css(pData);\r\n        \r\n        lAllStyle+=final_code;\r\n        \r\n        var minFileName=pFileName.replace('.css','.min.css');           \r\n           \r\n        if(pFileName===STYLE_CSS)lStyleCssDone=true;\r\n        if(pFileName===RESET_CSS)lResetCssDone=true;\r\n        /* if all files writed we\r\n         * save all minimized css \r\n         * to one file all.min.css\r\n         */                \r\n        if(lStyleCssDone && lResetCssDone){\r\n            /* если включена конвертация картинок в base64\r\n             * вызываем её\r\n             */\r\n            if(pImgConvertToBase64_b)\r\n                base64_images(lAllStyle);\r\n            else\r\n                fs.writeFile('all.min.css', lAllStyle, fileWrited('all.min.css'));         \r\n        }\r\n         /* в другом случае - записываем сжатый css файл*/\r\n        else fs.writeFile(path.basename(minFileName), final_code, fileWrited(minFileName));\r\n    };\r\n    \r\n    console.log('reading file ' + STYLE_CSS+'...');\r\n    fs.readFile(STYLE_CSS,fileReaded(STYLE_CSS,dataReaded_f));\r\n    \r\n    console.log('reading file ' + RESET_CSS+'...');\r\n    fs.readFile(RESET_CSS,fileReaded(RESET_CSS,dataReaded_f));    \r\n    \r\n    return true;\r\n};\r\n\r\n/* функция сжимает css-стили \r\n * и сохраняет их с именем .min.css\r\n */\r\nexports.html=function(){\r\n    'use strict';\r\n    \r\n     /* connecting cleanCSS,\r\n      * if we can't find it -\r\n      * return false\r\n      */\r\n     var htmlMinifier;\r\n     try{\r\n        htmlMinifier = require('html-minifier');\r\n    }catch(error){\r\n        console.log('can\\'n load html-minifier \\n'                 +\r\n            'to use html-minification you need to install html-minifier\\n'  +\r\n                'npm install html-minifier\\n'                               +\r\n                'https://github.com/kangax/html-minifier');\r\n        return false;\r\n    }\r\n    \r\n    /* Константы */\r\n    var INDEX_HTML='index.html';\r\n    \r\n    var dataReaded_f=function(pFileName, pData){\r\n        console.log('file ' + pFileName + ' readed');                \r\n        /*********************************/\r\n        /* сжимаем код через clean-css */\r\n        var html_minify=function(pData){\r\n            /* Сохраняем весь стиль в одну переменную*/            \r\n            \r\n            var lOptions={\r\n                removeComments:                 true,\r\n                removeCommentsFromCDATA:        true,\r\n                removeCDATASectionsFromCDATA:   true,\r\n                collapseWhitespace:             true,\r\n                collapseBooleanAttributes:      true,\r\n                removeAttributeQuotes:          true,\r\n                removeRedundantAttributes:      true,\r\n                useShortDoctype:                true,\r\n                removeEmptyAttributes:          true,\r\n                /* оставляем, поскольку у нас\r\n                 * в элемент fm генерируеться\r\n                 * таблица файлов\r\n                 */\r\n                removeEmptyElements:            false,\r\n                removeOptionalTags:             true,\r\n                removeScriptTypeAttributes:     true,\r\n                removeStyleLinkTypeAttributes:  true\r\n            };\r\n            \r\n            \r\n            return htmlMinifier.minify(pData,lOptions);\r\n        };\r\n        /*********************************/\r\n        var final_code=html_minify(pData);\r\n                \r\n        var minFileName=pFileName.replace('.html','.min.html');\r\n                    \r\n         /* записываем сжатый html файл*/\r\n        fs.writeFile(minFileName, final_code, fileWrited(minFileName));\r\n    };\r\n    \r\n    console.log('reading file ' + INDEX_HTML+'...');\r\n    fs.readFile(INDEX_HTML,fileReaded(INDEX_HTML,dataReaded_f));\r\n    \r\n    return true;\r\n};\r\n\r\n/* функция переводит картинки в base64 и записывает в css-файл*/\r\nfunction base64_images(pFileContent_s){\r\n    'use strict';    \r\n     var b64img;\r\n     try{\r\n        b64img = require('css-b64-images');\r\n    }catch(error){\r\n        console.log('can\\'n load clean-css \\n'                 +\r\n            'to use images to base64 convertation you need to install css-base64-images \\n'  +\r\n                'npm install -g css-b64-images\\n'                               +\r\n                'https://github.com/Filirom1/css-base64-images');\r\n        return false;\r\n    }\r\n    b64img.fromString(pFileContent_s, '.','', function(err, css){\r\n        console.log('images converted to base64 and saved in css file');\r\n        fs.writeFile('all.min.css', css, fileWrited('all.min.css'));\r\n    });\r\n}\r\n\r\n/* Функция создаёт асинхроную версию \r\n * для чтения файла\r\n * @pFileName - имя считываемого файла\r\n */\r\nfunction fileReaded(pFileName,pCompressFunc){\r\n    \"use strict\";\r\n    return function(pError,pData){\r\n        /* функция в которую мы попадаем,\r\n         * если данные считались\r\n         *\r\n         * если ошибка - показываем её\r\n         * иначе если переданная функция -\r\n         * функция запускаем её\r\n         */        \r\n        if(!pError)\r\n            if (pCompressFunc && typeof pCompressFunc===\"function\")\r\n                    pCompressFunc(pFileName,pData.toString());\r\n        else console.log(pError);\r\n    };\r\n}\r\n\r\n/*\r\n * Функция вызываеться после записи файла\r\n * и выводит ошибку или сообщает,\r\n * что файл успешно записан\r\n */\r\nfunction fileWrited(pFileName){\r\n    \"use strict\";\r\n    return function(error){\r\n        console.log(error?error:('file '+pFileName+' writed...'));\r\n    };\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":10350}]],"length":10350}
{"contributors":[],"silentsave":false,"ts":1341485022037,"patch":[[{"diffs":[[0,"UNC_JS='"],[-1,"/"],[0,"lib/clou"]],"start1":1114,"start2":1114,"length1":17,"length2":16}]],"length":10349,"saved":false}
{"ts":1341485120046,"patch":[[{"diffs":[[0,"Константы */"],[-1,"\r\n"],[0,"        \r\n  "]],"start1":1044,"start2":1044,"length1":26,"length2":24}]],"length":10347,"saved":false}
{"ts":1341485506013,"patch":[[{"diffs":[[0,"            */\r\n"],[1,"             \r\n            /*                            \r\n             * temporary changed dir path,\r\n             * becouse directory lib is write\r\n             * protected by others by default\r\n             * so if node process is started\r\n             * from other user (root for example\r\n             * in nodester) we can not write\r\n             * minified versions\r\n             */\r\n"],[0,"            if(p"]],"start1":2377,"start2":2377,"length1":32,"length2":422},{"diffs":[[0,"min.js')"],[1,"\r\n                                .replace("],[0,").length"]],"start1":3228,"start2":3228,"length1":16,"length2":59}]],"length":10780,"saved":false}
{"contributors":[],"silentsave":false,"ts":1341492596839,"patch":[[{"diffs":[[0,");\r\n"],[-1,"console.log('current dir: ' + process.cwd());\r\n"],[0,"/* -"]],"start1":325,"start2":325,"length1":55,"length2":8},{"diffs":[[0,"\n             */"],[-1,"\r\n"],[0,"             \r\n "]],"start1":2328,"start2":2328,"length1":34,"length2":32},{"diffs":[[0,"replace("],[1,"'/lib','')\r\n                                    .replace('/lib/client','')"],[0,").length"]],"start1":3222,"start2":3222,"length1":16,"length2":90}]],"length":10805,"saved":false}
