{"ts":1340792516246,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\"use strict\";\r\n/* Модуль, содержащий функции, которые будут работать \r\n * и на клиенте и на сервере \r\n * \r\n * Правила названий:\r\n * varName     - имя функции\r\n * lVarName    - имя локальной переменной\r\n * pVarName    - имя параметра\r\n * fVarName    - имя функции созданной внутри функции\r\n * VARNAME     - имя константы\r\n *\r\n * Типы переменных:\r\n * varNameS - строка\r\n * varNameN - число\r\n * varNameO - обьект\r\n * varNameM - массив\r\n */\r\n\r\nvar CloudFunc={\r\n    /* Путь с которым мы сейчас работаем */\r\n    Path    :'',\r\n    /* КОНСТАНТЫ (общие для клиента и сервера)*/\r\n    /* название программы */\r\n    NAME    :'Cloud Commander',\r\n    /* если в ссылке будет эта строка - \r\n     * в браузере js отключен\r\n     */\r\n    NOJS        : '/no-js',\r\n    FS          : '/c/f/s',\r\n    /* название css-класа кнопки обновления файловой структуры*/\r\n    REFRESHICON : 'refresh-icon',\r\n    /* id панелей с файлами */\r\n    LEFTPANEL   : 'left',\r\n    RIGHTPANEL  : 'right'\r\n    /* name of direcotory with libs */\r\n};\r\n\r\n/*\r\n * Функция убирает последний слеш,\r\n * если он - последний символ строки\r\n */\r\nCloudFunc.removeLastSlash = function(pPath){\r\n    if(typeof pPath==='string')\r\n        return (pPath.lastIndexOf('/')===pPath.length-1)?\r\n            pPath.substr(pPath, pPath.length-1):pPath;\r\n    else return pPath;\r\n}; \r\n/*\r\n * Функция меняет код символа пробела на пробел\r\n * в переданной строке\r\n * @pPath - строка\r\n */\r\nCloudFunc.replaceSpaces = function(pPath){\r\n    if(pPath.indexOf('%20')>0){\r\n        do{\r\n            pPath=pPath.replace('%20',' ');\r\n        }while(pPath.indexOf('%20')>0);\r\n    }\r\n    return pPath;\r\n};\r\n\r\n/* Функция возвращает заголовок веб страницы */\r\nCloudFunc.setTitle = function(){\r\n    \r\n    return CloudFunc.Path===''?CloudFunc.NAME:\r\n        CloudFunc.Path +\r\n        ' - ' + \r\n        CloudFunc.NAME;\r\n};\r\n/* Функция переводит права из цыфрового вида в символьный \r\n * @pPerm_s - строка с правами доступа\r\n * к файлу в 8-миричной системе\r\n */\r\nCloudFunc.convertPermissionsToSymbolic= function(pPerm_s){\r\n    /*\r\n        S_IRUSR   0000400   protection: readable by owner\r\n        S_IWUSR   0000200   writable by owner\r\n        S_IXUSR   0000100   executable by owner\r\n        S_IRGRP   0000040   readable by group\r\n        S_IWGRP   0000020   writable by group\r\n        S_IXGRP   0000010   executable by group\r\n        S_IROTH   0000004   readable by all\r\n        S_IWOTH   0000002   writable by all\r\n        S_IXOTH   0000001   executable by all\r\n    */\r\n    if(pPerm_s===undefined) return;\r\n    \r\n    /* тип файла */\r\n    var lType=pPerm_s.charAt(0);\r\n    \r\n    switch (lType-0) {\r\n        case 1: /* обычный файл */\r\n            lType='-';\r\n            break;\r\n        case 2: /* байт-ориентированное (символьное) устройство*/\r\n            lType='c';\r\n            break;\r\n        case 4: /* каталог */\r\n            lType='d';\r\n            break;            \r\n        default:\r\n            lType='-';\r\n    }\r\n    \r\n    /* оставляем последние 3 символа*/\r\n    pPerm_s=pPerm_s.length>5?pPerm_s.substr(3):pPerm_s.substr(2);        \r\n    \r\n    /* Рекомендации гугла советуют вместо string[3]\r\n     * использовать string.charAt(3)\r\n     */\r\n/*    \r\n    http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Standards_features#Standards_features\r\n    \r\n    Always preferred over non-standards featuresFor\r\n    maximum portability and compatibility, always \r\n    prefer standards features over non-standards \r\n    features (e.g., string.charAt(3) over string[3]\r\n    and element access with DOM functions instead\r\n    of using an application-specific shorthand).\r\n*/\r\n    /* Переводим в двоичную систему */\r\n    var lOwner=(pPerm_s[0]-0).toString(2);\r\n    var lGroup=(pPerm_s[1]-0).toString(2);\r\n    var lAll  =(pPerm_s[2]-0).toString(2);\r\n    /*\r\n        console.log(lOwner+' '+lGroup+' '+lAll);\r\n    */\r\n    /* переводим в символьную систему*/\r\n    var lPermissions=//lType+' '+\r\n                     (lOwner[0]-0>0?'r':'-')+\r\n                     (lOwner[1]-0>0?'w':'-')+\r\n                     (lOwner[2]-0>0?'x':'-')+\r\n                     ' '                    +\r\n                     (lGroup[0]-0>0?'r':'-')+\r\n                     (lGroup[1]-0>0?'w':'-')+\r\n                     (lGroup[2]-0>0?'x':'-')+\r\n                     ' '                    +\r\n                     (lAll[0]-0>0?'r':'-')+\r\n                     (lAll[1]-0>0?'w':'-')+\r\n                     (lAll[2]-0>0?'x':'-');\r\n    /*\r\n        console.log(lPermissions);\r\n    */\r\n    return lPermissions;\r\n};\r\n\r\n/* Функция конвертирует права доступа к файлам из символьного вида\r\n * в цыфровой\r\n */\r\nCloudFunc.convertPermissionsToNumberic= function(pPerm_s){\r\n    /* если передана правильная строка, конвертированная\r\n     * функциец convertPermissionsToSymbolic\r\n     */     \r\n    if(!pPerm_s || pPerm_s.length!==11)return pPerm_s;\r\n    \r\n    var lOwner= (pPerm_s[0]==='r'?4:0) +\r\n                (pPerm_s[1]==='w'?2:0) +\r\n                (pPerm_s[2]==='x'?1:0);\r\n    var lGroup= (pPerm_s[4]==='r'?4:0) +\r\n                (pPerm_s[5]==='w'?2:0) +\r\n                (pPerm_s[6]==='x'?1:0);\r\n    var lAll  = (pPerm_s[8]==='r'?4:0) +\r\n                (pPerm_s[9]==='w'?2:0) +\r\n                (pPerm_s[10]==='x'?1:0);\r\n    /* добавляем 2 цыфры до 5 */\r\n    return '00'+lOwner+lGroup+lAll;\r\n};\r\n/* Функция получает короткие размеры\r\n * конвертируя байт в килобайты, мегабойты,\r\n * гигайбайты и терабайты\r\n * @pSize - размер в байтах\r\n */\r\nCloudFunc.getShortedSize=function(pSize){\r\n    /* Константі размеров, что используются\r\n     * внутри функции\r\n     */\r\n    var l1BMAX=1024;\r\n    var l1KBMAX=1048576;\r\n    var l1MBMAX=1073741824;\r\n    var l1GBMAX=1099511627776;\r\n    var l1TBMAX=1125899906842624;\r\n    \r\n    var lShorted;\r\n    \r\n    if(pSize<l1BMAX)lShorted=pSize+'b';\r\n    else if(pSize<l1KBMAX)lShorted=(pSize/l1BMAX) .toFixed(2)+'kb';\r\n    else if(pSize<l1MBMAX)lShorted=(pSize/l1KBMAX).toFixed(2)+'mb';\r\n    else if(pSize<l1GBMAX)lShorted=(pSize/l1MBMAX).toFixed(2)+'gb';\r\n    else if(pSize<l1TBMAX)lShorted=(pSize/l1GBMAX).toFixed(2)+'tb';\r\n    return lShorted;\r\n};\r\n\r\n/* Функция парсит uid и имена пользователей\r\n * из переданного в строке вычитаного файла /etc/passwd\r\n * и возвращает массив обьектов имён и uid пользователей\r\n * @pPasswd_s - строка, в которой находиться файл /etc/passwd\r\n */\r\nCloudFunc.getUserUIDsAndNames=function(pPasswd_s){\r\n    var lUsers={name:'',uid:''};\r\n    var lUsersData=[];\r\n    var i=0;\r\n    do{\r\n        /* получаем первую строку */        \r\n        var lLine=pPasswd_s.substr(pPasswd_s,pPasswd_s.indexOf('\\n')+1);\r\n        if(lLine){\r\n        /* удаляем первую строку из /etc/passwd*/\r\n        pPasswd_s=pPasswd_s.replace(lLine,'');\r\n        /* получаем первое слово строки */\r\n        var lName=lLine.substr(lLine,lLine.indexOf(':'));\r\n        lLine=lLine.replace(lName+':x:','');\r\n        /* получаем uid*/\r\n        var lUID=lLine.substr(lLine,lLine.indexOf(':'));\r\n        if((lUID-0).toString()!=='NaN'){\r\n            lUsers.name=lName;\r\n            lUsers.uid=lUID;\r\n            lUsersData[i++]=lUsers;\r\n            console.log('uid='+lUID+' name='+lName);\r\n        }\r\n        }\r\n    }while(pPasswd_s!=='');\r\n    \r\n    return lUsersData;\r\n};\r\n/* Функция получает адреса каждого каталога в пути\r\n * возвращаеться массив каталогов\r\n * @url -  адрес каталога\r\n */\r\nCloudFunc._getDirPath=function(url)\r\n{\r\n    var folders=[];\r\n    var i=0;\r\n    do{\r\n        folders[i++]=url; url=url.substr(url,url.lastIndexOf('/'));\r\n    }while(url!=='');\r\n    \r\n    /* сохраяем адрес предыдущего каталога */\r\n    /*\r\n        if(i>2){\r\n            if(folders[0].lastIndexOf('/')===folders[0].length)\r\n                LPrevDir=folders[1];\r\n            else LPrevDir=folders[2];\r\n        }else LPrevDir='/';\r\n    */\r\n    /* ################################### */\r\n        \r\n    /* Формируем ссылки на каждый каталог в пути */\r\n    var lHref='<a class=links href=';\r\n    var lTitle=' title=';\r\n    var _l='>';\r\n    var lHrefEnd='</a>';\r\n    \r\n    var lHtmlPath;\r\n    /* путь в ссылке, который говорит\r\n     * что js отключен\r\n     */\r\n    var lNoJS_s=CloudFunc.NOJS;\r\n    var lFS_s=CloudFunc.FS;\r\n    /* корневой каталог */\r\n    lHtmlPath=lHref+lFS_s+lNoJS_s+lTitle+'\"/\"'+_l+'/'+lHrefEnd;\r\n    for(i=folders.length-1;i>0;i--)\r\n    {\r\n        var lUrl=folders[i];\r\n        var lShortName=lUrl.replace(lUrl.substr(lUrl,lUrl.lastIndexOf('/')+1),'');        \r\n        if(i!==1)\r\n        {\r\n            lHtmlPath+=lHref+lFS_s+lNoJS_s+lUrl+lTitle+lUrl+_l+lShortName+lHrefEnd+'/';            \r\n        }\r\n        else\r\n            lHtmlPath+=lShortName+'/';\r\n    }\r\n    /* *** */\r\n    return lHtmlPath;    \r\n};\r\n\r\n/*\r\n * Функция ищет в имени файла расширение\r\n * и если находит возвращает true\r\n * @pName - получает имя файла\r\n * @pExt - расширение\r\n */\r\nCloudFunc.checkExtension=function(pName,pExt)\r\n{\r\n    /* если длина имени больше\r\n     * длинны расширения - \r\n     * имеет смысл продолжать\r\n     */\r\n    if(pName.length>pExt.length){\r\n        var lLength=pName.length;           /* длина имени*/\r\n        var lExtNum=pName.lastIndexOf(pExt);/* последнее вхождение расширения*/\r\n        var lExtSub=lLength-lExtNum;        /* длина расширения*/\r\n        /* если pExt - расширение pName */\r\n        if(lExtSub===pExt.length)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n    else return false;\r\n};\r\n\r\n/*\r\n * Функция формирует заголовки столбиков\r\n * @pFileTableTitles - массив названий столбиков\r\n */\r\nCloudFunc._getFileTableHeader=function(pFileTableTitles)\r\n{\r\n    var lHeader='<li class=fm_header>';\r\n    lHeader+='<span class=mini-icon></span>';\r\n    for(var i=0;i<pFileTableTitles.length;i++)\r\n    {\r\n        var lStr=pFileTableTitles[i];\r\n        lHeader+='<span class='+lStr+'>'+\r\n                    lStr+\r\n                '</span>';\r\n    }\r\n    lHeader+='</li>';\r\n    \r\n    return lHeader;\r\n};\r\n\r\n/*\r\n * Функция строит таблицу файлв из JSON-информации о файлах\r\n * @pJSON           - информация о файлах \r\n * @pKeyBinded      - если клавиши назначены, выделяем верхний файл\r\n * [{path:'путь',size:'dir'},\r\n * {name:'имя',size:'размер',mode:'права доступа'}]\r\n */\r\nCloudFunc.buildFromJSON=function(pJSON,pKeyBinded)\r\n{\r\n    var files;\r\n    /*\r\n     * если пропарсить стандартными\r\n     * функциями нельзя - \r\n     * пробуем eval,\r\n     */\r\n    /* \r\n     * Если мы на клиенте и нет JSON -\r\n     * через eval парсим.\r\n     * Если-же мы на сервере,\r\n     * или на клиенте всё есть\r\n     * парсим стандарным методом\r\n     */\r\n    \r\n    /* По скольку мы прописали заголовок application/json\r\n     * нет необходимости его конвертировать,\r\n     * но она есть, если мы вытягиваем данные из\r\n     * localStorage\r\n     */\r\n     /*\r\n            if(typeof pJSON==='string'){\r\n                if(window && !window.JSON){\r\n                    try{\r\n                        files=eval('('+pJSON+')');\r\n                    }catch(err){\r\n                        console.log(err);\r\n                    }\r\n                }\r\n                else files=JSON.parse(pJSON);\r\n            }else \r\n    */\r\n        files=pJSON;\r\n     /* сохраняем путь каталога в котором мы сейчас находимся*/\r\n    var lPath=files[0].path;\r\n    \r\n    /* сохраняем путь */\r\n    CloudFunc.Path=lPath;\r\n    \r\n    /* \r\n     * Строим путь каталога в котором мы находимся\r\n     * со всеми подкаталогами\r\n     */    \r\n    var lHtmlPath=CloudFunc._getDirPath(lPath);\r\n            \r\n    /* Убираем последний слэш\r\n     * с пути для кнопки обновить страницу\r\n     * если он есть\r\n     */\r\n    var lRefreshPath=CloudFunc.removeLastSlash(lPath);\r\n    \r\n    /* путь в ссылке, который говорит\r\n     * что js отключен\r\n     */\r\n    var lNoJS_s=CloudFunc.NOJS;\r\n    var lFS_s=CloudFunc.FS;\r\n    \r\n    var lFileTable='<li class=path>'+\r\n        '<span class=\"path_icon clear-cache\" id=clear-cache title=\"clear cache (Ctrl+D)\"></span>'+\r\n        '<a href=\"'+lFS_s+lNoJS_s+lRefreshPath+'\">'+\r\n            '<span class=\"path_icon ' + CloudFunc.REFRESHICON + '\"' +\r\n                ' title=\"refresh (Ctrl+R)\">'                  +\r\n            '</span>'+\r\n        '</a>'+\r\n        '<span>'+lHtmlPath+'</span>'+\r\n        '</li>';\r\n    \r\n    var fileTableTitles=['name','size','owner','mode'];\r\n    lFileTable+=CloudFunc._getFileTableHeader(fileTableTitles);\r\n    /* Если мы не в корне */\r\n    if(lPath!=='/'){    \r\n        /* ссылка на верхний каталог*/        \r\n        var lDotDot;                        \r\n        /* убираем последний слеш и каталог в котором мы сейчас находимся*/\r\n        lDotDot=lPath.substr(lPath,lPath.lastIndexOf('/'));\r\n        lDotDot=lDotDot.substr(lDotDot,lDotDot.lastIndexOf('/'));\r\n        /* Если предыдущий каталог корневой */\r\n        if(lDotDot==='')lDotDot='/';\r\n        \r\n        /* Сохраняем путь к каталогу верхнего уровня*/\r\n        lFileTable += '<li class=current-file>'+\r\n                                '<span class=\"mini-icon directory\">' +\r\n                                '</span>'                            +\r\n                                '<span class=name>'                  +\r\n                                    '<a href=\"'+lFS_s+lNoJS_s        +\r\n                                    lDotDot                          +\r\n                                    '\">'+\"..</a>\"                    +\r\n                                '</span>'                            +                                \r\n                                '<span class=size>&lt;dir&gt;</span>'+\r\n                                '<span class=owner>.</span>'         +\r\n                                '<span class=mode></span>'           +\r\n                                '</li>';        \r\n    }\r\n    var lLength=files.length;\r\n    \r\n    for(var i=1;i<lLength;i++){    \r\n        lFileTable +='<li class>';\r\n        lFileTable += '<span class=\"mini-icon ';\r\n        /* если папка - выводим другую иконку */\r\n        lFileTable += (files[i].size==='dir'?\r\n                        'directory':'text-file')                    +\r\n                        '\">';\r\n        lFileTable +='</span>';\r\n        lFileTable +='<span class=name>'                            +\r\n                        '<a href=\"'+lFS_s+lNoJS_s                      +\r\n                        lPath+files[i].name                         +\r\n                        '\"'                                         +\r\n                        /* открываем файлы */\r\n                        /*в новой вкладке  */\r\n                      (files[i].size==='dir'?'': ' target=\"_blank\"')+                      \r\n                        /* если длина имени файла больше 16 символов\r\n                         * отрезаем лишнее, оставляя лишь 16,\r\n                         * и добавляем две точки и тайтл\r\n                         */\r\n                        (files[i].name.length>16?\r\n                        ' title=\"'+files[i].name+'\">'                +\r\n                        files[i].name.substr(\r\n                            files[i].name,16)+\r\n                        '..':'>'+files[i].name)                      +\r\n                        \"</a>\"                                       +\r\n                    '</span>';\r\n        /* если папка - не выводим размер */\r\n        lFileTable +='<span class=size>'                             +\r\n                        (files[i].size==='dir'?\r\n                            '&lt;dir&gt;':\r\n                            /* если это файл - получаем\r\n                             * короткий размер\r\n                             */\r\n                            CloudFunc.getShortedSize(\r\n                            files[i].size));\r\n        lFileTable +='</span>'                                       +\r\n                        '<span class=owner>'                         +\r\n                        (!files[i].uid?'root':files[i].uid)          +\r\n                        '</span>'                                    +\r\n                        '<span class=mode>'                          +\r\n                        /* конвертируем названия разрешений\r\n                         * из числового формата в буквенный\r\n                         * при этом корневой каталог не трогаем\r\n                         * по скольку в нём и так всё уже\r\n                         * установлено еще на сервере\r\n                         */\r\n                        (//lPath==='/'?files[i].mode:\r\n                        CloudFunc.convertPermissionsToSymbolic(files[i].mode)) +\r\n                        '</span>';\r\n        lFileTable +='</li>';            \r\n    }\r\n    \r\n    /* если клавиши назначены и\r\n     * мы в корневом каталоге и\r\n     * верхний файл еще не выделен -\r\n     * выделяем верхний файл\r\n     */\r\n    if(pKeyBinded && lPath==='/'&&\r\n        lFileTable.indexOf('<li class=current-file>')<0){\r\n            lFileTable=lFileTable.replace('<li class>','<li class=current-file>');\r\n    }\r\n\r\n    \r\n    \r\n    return lFileTable;\r\n};\r\n\r\n/*\r\n * Если мы на стороне сервера -\r\n * прописываем экспортируемые функции\r\n */\r\ntry{\r\n    if(exports){\r\n        /* экспортируемые функции */        \r\n        exports.checkExtension      = CloudFunc.checkExtension;\r\n        exports.buildFromJSON       = CloudFunc.buildFromJSON;\r\n        exports.replaceSpaces       = CloudFunc.replaceSpaces;        \r\n        exports.setTitle            = CloudFunc.setTitle;\r\n        exports.convertPermissions  = CloudFunc.convertPermissions;\r\n        exports.getUserUIDsAndNames = CloudFunc.getUserUIDsAndNames;\r\n        \r\n        /* константы*/\r\n        exports.Name                = CloudFunc.NAME;\r\n        exports.NOJS                = CloudFunc.NOJS;\r\n        exports.FS                  =CloudFunc.FS;\r\n        \r\n        console.log('cloudfunc.js loaded...');\r\n    }\r\n}catch(err){\r\n        /* если мы на клиенте */\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":17708}]],"length":17708}
